/***************************************************************************
 *
 *  ARICENT -
 *
 *  Copyright (c) Aricent.
 *
 ****************************************************************************
 *
 *  $Id: lteMacStatsManager.c
 *
 ****************************************************************************
 *
 *  File Description : This file contains the functionality that is invoked 
 *                     from execution scheduler to obtain downlink and uplink
 *                     stats in the file.
 *
 ****************************************************************************
 *
 * Revision Details
 * ----------------
 *$Log: lteMacStatsManager.c,v $
 *Revision 1.1.1.1.6.1.6.3  2010/10/25 08:36:31  gur23971
 *stats related changes
 *
 *Revision 1.1.1.1.6.1.6.2  2010/10/22 12:44:10  gur04640
 *Statistics code merged from branch BRFramework_RRC1_0_RLC_AM_MAC_8_8_FAPI_optimizations
 *
 *Revision 1.1.1.1.6.1.6.1  2010/10/11 12:56:56  gur10121
 *SPR #706 fix
 *Revision 1.1.1.1.6.1.8.3  2010/10/22 06:12:03  gur04640
 *FAPI and per TTI stats implemented
 *
 *Revision 1.1.1.1.6.1.10.1  2010/10/08 07:42:39  gur10121
 * SPR 706 Fix - KlockWork Warnings removed
 *Revision 1.1.1.1.6.1.8.2  2010/10/20 10:24:38  gur04640
 *FAPI specific PHY interface stats added
 *
 *Revision 1.1.1.1.6.1.8.1  2010/10/13 10:59:37  gur04640
 *Changes done for implementing Stats using shared memory
 *
 *Revision 1.1.1.1.6.1.8.1  2010/10/12 02:45:30  gur04640
 *Changes done for implementing Stats using shared memory
 *
 *Revision 1.1.1.1.6.1  2010/08/02 08:13:42  gur20491
 *FrameworkSetupWith1.0_MAC1.2.4
 *
 *Revision 1.24  2009/11/15 12:57:25  gur11912
 *LTE_MAC_UT_LOG(LOG_WARNING) used instead of lteWarning
 *
 *Revision 1.23  2009/11/11 13:02:49  gur19413
 *file name changed -> DownlinkstatsInfo to downlinkstatsInfo
 *
 *Revision 1.22  2009/11/02 05:33:40  gur11912
 *updated for RA Policy
 *
 *Revision 1.21  2009/11/01 11:42:19  gur11912
 *RBBitMap printed in Hexadecimal format
 *
 *Revision 1.20  2009/10/25 11:10:46  gur11912
 *DL and UL stats functionality separated
 *
 *Revision 1.19  2009/10/21 05:58:19  gur19413
 *optimized stats functionality
 *
 *Revision 1.18  2009/09/03 14:27:44  gur19413
 *bug fixed
 *
 *Revision 1.17  2009/09/02 19:24:55  gur19413
 *bug fixed
 *
 *Revision 1.16  2009/09/02 13:49:46  gur19413
 *bug fixed
 *
 *Revision 1.15  2009/09/02 13:32:07  gur19413
 *bug fixed for customized file name
 *
 *Revision 1.14  2009/08/28 13:33:10  gur19413
 *bug fixed
 *
 *Revision 1.13  2009/08/28 13:29:38  gur19413
 *replace older logger system to new one
 *
 *Revision 1.12  2009/08/21 10:48:06  gur19413
 *bug fixed
 *
 *Revision 1.11  2009/08/20 06:42:55  gur19413
 *added stat functionality for PRACH and PUCCH Reports
 *
 *Revision 1.10  2009/08/03 10:38:24  gur11083
 *changed for multiple UE stats for UL/DL
 *
 *
 ****************************************************************************/


/****************************************************************************
 * Standard Library Includes
 ****************************************************************************/



/****************************************************************************
 * Project Includes
 ****************************************************************************/

#include "lteMacCellConfMgr.h"
#include "lteMacComPorting.h"
#include "lteMacStatsManager.h"
#include "lteCommonStatsManager.h"
#include "lteFapiMacPhyInterface.h"
#include "lteMacDLSchedulerStrategy.h"
#include "lteMacULSchedulerStrategy.h"
#include "lteMacFAPIApi.h"
/* SPR 13888 fix start */
#ifdef TDD_CONFIG
#include "lteMacTddMgr.h"
#endif
/* SPR 13888 fix end */

/****************************************************************************
 Private Definitions
 ****************************************************************************/
/* Since max size of DL CONFIG msg is 65535, and the minimum size of one pdu
 * is 12, so the maximumnumber of PDUs possible in one request are
 * 65536/12 = 5462 */
#define LTE_MAC_STATS_MAX_PDU   5462

#define LTE_MAC_STATS_RF_TTI_STATS(internalCellIndex) gMacStats.pStats->\
            phyStats[(internalCellIndex)].radioFrameStats \
            .ttiStats[lLteMacStatsRfMulFactor_g*MAX_SFN_VALUE + \
            lLteMacStatsRfSfn_g[internalCellIndex] % LTE_MAC_STATS_MAX_SFN][lLteMacStatsRfSf_g[internalCellIndex]]

/****************************************************************************
 Private Types
 ****************************************************************************/

/****************************************************************************
 * Private Function Prototypes
 ****************************************************************************/

/*****************************************************************************
 * Private Constants
 ****************************************************************************/

/****************************************************************************
 * Exported Variables
 ****************************************************************************/

/*SPR 11812 Fix Start*/
#ifdef TDD_CONFIG
extern UInt8 getDlAckNackOffset( UInt8 subframeNum,InternalCellIndex internalCellIndex);
#endif
/*SPR 11812 Fix End*/
/****************************************************************************
 * Private Variables (Must be declared static)
 ****************************************************************************/

static UInt8 lLteMacPduIdxToPduType[MAX_NUM_CELL][LTE_MAC_STATS_MAX_PDU] = {{0}};

/* FAPI2.4 Changes Start */
extern void (*lteMacUpdateFapiHarqIndStatsFunction )(void *msg_p,
        InternalCellIndex internalCellIndex);
extern void (*lteMacUpdateFapiRxUlschStatsFunction)(UInt8 *pBufferToSend,
        InternalCellIndex internalCellIndex);
extern void (*lteMacUpdateFapiRachIndStatsFunction)(UInt8 *pBufferToSend,
        InternalCellIndex internalCellIndex);
extern void (*lteMacUpdateFapiCqiIndStatsFunction)(UInt8 *pBufferToSend,
        InternalCellIndex internalCellIndex);
/* FAPI2.4 Changes Start */
/* 32.425 Events code changes start*/
#ifdef KPI_STATS
/* + PERF_CA GBL */
LTE_CIRCQUEUE kpiStatsUlIpThpQueue_g[MAX_NUM_CELL];
/* - PERF_CA GBL */
ScheduledIPThroughputULT scheduledIPThroughputUL_g[MAX_UE_SUPPORTED][MAX_LOGICAL_CHANNEL - 3];
/* +- SPR 17404 */
void updateIPLatencyKpiStats(UInt8 commonIndex, UInt16 ueIndex, UInt8 lcId);
#endif
/* 32.425 Events code changes end*/


/****************************************************************************
 * Function Name  : initStatsManager 
 * Inputs         : None 
 * Outputs        : None
 * Returns        : None
 * Description    : This function initialises global variables needed to push 
 *                  pop the nodes into the global queue when global stats
 *                  array is filled and the stats info when dumped into the
 *                  file respectively with respect to stats manager.
 ****************************************************************************/
/* + SPR 17439 */
void initStatsManager(void)
/* - SPR 17439 */    
{
#ifdef KPI_STATS
	/* + PERF_CA GBL */
    QINIT_KPI_STATS_UL_IP_THP_Q();
	/* - PERF_CA GBL */
    /* +- SPR 17404 */
#endif
}


/****************************************************************************
 * Function Name  : lteMacUpdateFapiParReqStats
 * Inputs         : pBufferToSend - buffer being sent to PHY interface
 *                  bufferlength - length pf buffer in bytes.
 *                  internalCellIndex - cell id  
 * Outputs        : None
 * Returns        : None
 * Description    : This function updates stats for FAPI PARAM REQUEST
 *                  message.
 ****************************************************************************/
/* CA Stats Changes Start */
/* +- SPR 17777*/
static  void lteMacUpdateFapiParReqStats(InternalCellIndex internalCellIndex)
/* +- SPR 17777*/
{
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.
        parReqStats.numMsgs++;
}

/****************************************************************************
 * Function Name  : lteMacUpdateFapiCellConfReqStats
 * Inputs         : pBufferToSend - buffer being sent to PHY interface
 *                  bufferlength - length pf buffer in bytes.
 *                  internalCellIndex - cell id  
 * Outputs        : None
 * Returns        : None
 * Description    : This function updates stats for FAPI CELL CONFIG REQUEST
 *                  message.
 ****************************************************************************/
static  void lteMacUpdateFapiCellConfReqStats(UInt8 *pBufferToSend,
        /* +- SPR 17777*/
        InternalCellIndex internalCellIndex)
{
    FAPI_phyCellConfigRequest_st    *pCellConfReq =
        (FAPI_phyCellConfigRequest_st *)
        ((FAPI_l1ApiMsg_st *)pBufferToSend)->msgBody;
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.
        cellConfReqStats.numMsgs++;
    LTE_MAC_STATS_RF_TTI_STATS(internalCellIndex).msgTx |= 
        LTE_MAC_STATS_RF_TX_CELL_CONFIG_REQ;
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.
        cellConfReqStats.numTlvs +=
        pCellConfReq->numOfTlv;
}

/****************************************************************************
 * Function Name  : lteMacUpdateFapiStartReqStats
 * Inputs         : pBufferToSend - buffer being sent to PHY interface
 *                  bufferlength - length pf buffer in bytes.
 *                  internalCellIndex - cell id  
 * Outputs        : None
 * Returns        : None
 * Description    : This function updates stats for FAPI START REQUEST
 *                  message.
 ****************************************************************************/
/* +- SPR 17777*/
static  void lteMacUpdateFapiStartReqStats(
        InternalCellIndex internalCellIndex)
/* +- SPR 17777*/
{
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.
        startReqStats.numMsgs++;
    LTE_MAC_STATS_RF_TTI_STATS(internalCellIndex).msgTx |= 
        LTE_MAC_STATS_RF_TX_START_REQ;
}

/****************************************************************************
 * Function Name  : lteMacUpdateFapiStopReqStats
 * Inputs         : pBufferToSend - buffer being sent to PHY interface
 *                  bufferlength - length pf buffer in bytes.
 *                  internalCellIndex - cell id  
 * Outputs        : None
 * Returns        : None
 * Description    : This function updates stats for FAPI STOP REQUEST
 *                  message.
 ****************************************************************************/
/* +- SPR 17777*/
static  void lteMacUpdateFapiStopReqStats(
        InternalCellIndex internalCellIndex)
/* +- SPR 17777*/
{
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.
        stopReqStats.numMsgs++;
    LTE_MAC_STATS_RF_TTI_STATS(internalCellIndex).msgTx |= 
        LTE_MAC_STATS_RF_TX_STOP_REQ;
}

/****************************************************************************
 * Function Name  : lteMacUpdateFapiUeConfReqStats
 * Inputs         : pUeConfReq - pointer to structure FAPI_ueConfigRequest_st
 *                  internalCellIndex - cell id  
 * Outputs        : None
 * Returns        : None
 * Description    : This function updates stats for FAPI UE CONFIG REQUEST
 *                  message.
 ****************************************************************************/

/*Rel_523_Coverity_10165 Fix start*/ 
static  void lteMacUpdateFapiUeConfReqStats(FAPI_ueConfigRequest_st *pUeConfReq,
        InternalCellIndex internalCellIndex)
/*Rel_523_Coverity_10165 Fix end*/ 

{
    FAPI_ueConfig_st            *pNextTlv = PNULL;
    UInt32          iterator = 0;
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.
        ueConfReqStats.numMsgs++;
    LTE_MAC_STATS_RF_TTI_STATS(internalCellIndex).msgTx |= 
        LTE_MAC_STATS_RF_TX_UE_CONFIG_REQ;
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.
        ueConfReqStats.numTlvs += pUeConfReq->numOfTlv;

    pNextTlv = pUeConfReq->tlvs;
    for (;iterator < pUeConfReq->numOfTlv; iterator++)
    {
        if (sizeof(FAPI_cellConfig_st) < pNextTlv->tagLen)
        {
            lteWarning("Tag length in UE CONFIG REQUEST is too large [%d]\n",
                    pNextTlv->tagLen);
            return;
        }
        gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.
            ueConfReqStats.numBytes += pNextTlv->tagLen;
        pNextTlv = (FAPI_ueConfig_st *)
            (((UInt8 *)pNextTlv) + pNextTlv->tagLen);
    }
}

/****************************************************************************
 * Function Name  : lteMacUpdateFapiDlConfDciStats
 * Inputs         : pPdu - PDU being sent to PHY interface,
 *                  pduLen - length of pdu in bytes.
 *                  internalCellIndex - cell id  
 * Outputs        : None
 * Returns        : None
 * Description    : This function updates stats for FAPI DL CONFIG REQUEST
 *                  message DCI PDU.
 ****************************************************************************/
/* +- SPR 17777*/
static  void lteMacUpdateFapiDlConfDciStats(
        UInt32 pduLen, InternalCellIndex internalCellIndex)
{
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.
        dlConfReqStats.dciStats.numPdu++;
    LTE_MAC_STATS_RF_TTI_STATS(internalCellIndex).msgTx |= 
        LTE_MAC_STATS_RF_TX_DL_CONFIG_DCI;
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.
        dlConfReqStats.dciStats.numBytes += pduLen;
}

/****************************************************************************
 * Function Name  : lteMacUpdateFapiDlConfBchStats
 * Inputs         : pPdu - PDU being sent to PHY interface
 *                  pduLen - length of pdu in bytes.
 *                  internalCellIndex - cell id  
 * Outputs        : None
 * Returns        : None
 * Description    : This function updates stats for FAPI DL CONFIG REQUEST
 *                  message BCH PDU.
 ****************************************************************************/
static  void lteMacUpdateFapiDlConfBchStats(
        FAPI_bchConfigPDUInfo_st *pPdu, UInt32 pduLen, InternalCellIndex internalCellIndex)
{
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.
        dlConfReqStats.bchStats.numPdu++;
    LTE_MAC_STATS_RF_TTI_STATS(internalCellIndex).msgTx |= 
        LTE_MAC_STATS_RF_TX_DL_CONFIG_BCH;
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.
        dlConfReqStats.bchStats.numBytes +=
        pduLen;
    lLteMacPduIdxToPduType[internalCellIndex][pPdu->pduIndex] = FAPI_BCH_PDU;
}

/****************************************************************************
 * Function Name  : lteMacUpdateFapiDlConfMchStats
 * Inputs         : pPdu - PDU being sent to PHY interface
 *                  pduLen - length of pdu in bytes.
 *                  internalCellIndex - cell id  
 * Outputs        : None
 * Returns        : None
 * Description    : This function updates stats for FAPI DL CONFIG REQUEST
 *                  message MCH PDU.
 ****************************************************************************/
static  void lteMacUpdateFapiDlConfMchStats(
        FAPI_mchConfigPDUInfo_st *pPdu, UInt32 pduLen, InternalCellIndex internalCellIndex)
{
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.
        dlConfReqStats.mchStats.numPdu++;
    LTE_MAC_STATS_RF_TTI_STATS(internalCellIndex).msgTx |= 
        LTE_MAC_STATS_RF_TX_DL_CONFIG_MCH;
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.
        dlConfReqStats.mchStats.numBytes +=
        pduLen;
    lLteMacPduIdxToPduType[internalCellIndex][pPdu->pduIndex] = FAPI_MCH_PDU;
}

/****************************************************************************
* Function Name  : lteMacUpdateFapiDlConfDlschStats
* Inputs         : pPdu - PDU being sent to PHY interface
*                  pduLen - length of pdu in bytes.
*                  internalCellIndex - cell id  
* Outputs        : None
* Returns        : None
* Description    : This function updates stats for FAPI DL CONFIG REQUEST
*                  message DLSCH PDU.
****************************************************************************/
static  void lteMacUpdateFapiDlConfDlschStats(
        FAPI_dlSCHConfigPDUInfo_st *pPdu, UInt32 pduLen, InternalCellIndex internalCellIndex)
{
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.
        dlConfReqStats.dlschStats.numPdu++;
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.
        dlConfReqStats.dlschStats.numBytes += pduLen;
    lLteMacPduIdxToPduType[internalCellIndex][pPdu->pduIndex] = FAPI_DLSCH_PDU;
    LTE_MAC_STATS_RF_TTI_STATS(internalCellIndex).msgTx |= 
        LTE_MAC_STATS_RF_TX_DL_CONFIG_DLSCH;
    LTE_MAC_STATS_RF_TTI_STATS(internalCellIndex).numTb = pPdu->transportBlocks;
    LTE_MAC_STATS_RF_TTI_STATS(internalCellIndex).mcs = pPdu->mcs;
}

/****************************************************************************
* Function Name  : lteMacUpdateFapiDlConfPchStats
* Inputs         : pPdu - PDU being sent to PHY interface
*                  pduLen - length of pdu in bytes.
*                  internalCellIndex - cell id  
* Outputs        : None
* Returns        : None
* Description    : This function updates stats for FAPI DL CONFIG REQUEST
*                  message PCH PDU.
****************************************************************************/
static  void lteMacUpdateFapiDlConfPchStats(
        FAPI_pchPduConfigInfo_st *pPdu, UInt32 pduLen, InternalCellIndex internalCellIndex)
{
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.
        dlConfReqStats.pchStats.numPdu++;
    LTE_MAC_STATS_RF_TTI_STATS(internalCellIndex).msgTx |= 
        LTE_MAC_STATS_RF_TX_DL_CONFIG_PCH;
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.
        dlConfReqStats.pchStats.numBytes += pduLen;
    lLteMacPduIdxToPduType[internalCellIndex][pPdu->pduIndex] = FAPI_PCH_PDU;
}

/****************************************************************************
* Function Name  : lteMacUpdateFapiDlConfReqStats
* Inputs         : pDlConfReq - pointer to structure FAPI_dlConfigRequest_st
*                  internalCellIndex - cell id  
* Outputs        : None
* Returns        : None
* Description    : This function updates stats for FAPI DL CONFIG REQUEST
*                  message.
****************************************************************************/
/*Rel_523_Coverity_10162 Fix start*/ 
static  void lteMacUpdateFapiDlConfReqStats(FAPI_dlConfigRequest_st  *pDlConfReq,
        InternalCellIndex internalCellIndex)
/*Rel_523_Coverity_10162 Fix end*/ 
{
    FAPI_dlConfigPDUInfo_st     *pDlPdu = PNULL;
    UInt32      iterator = 0;

    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.
        dlConfReqStats.numMsgs++;
    LTE_MAC_STATS_RF_TTI_STATS(internalCellIndex).msgTx |= 
        LTE_MAC_STATS_RF_TX_DL_CONFIG;
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.
        dlConfReqStats.numBytes += pDlConfReq->length;
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.
        dlConfReqStats.numDci += pDlConfReq->numDCI;
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.
        dlConfReqStats.numPdu +=
        pDlConfReq->numOfPDU;

    pDlPdu = pDlConfReq->dlConfigpduInfo;
    for (; iterator < pDlConfReq->numOfPDU; iterator++)
    {
        if (sizeof(FAPI_dlConfigPDUInfo_st) < pDlPdu->pduSize)
        {
            lteWarning("Length of DL CONFIG PDU is too large [%d]\n",
                    pDlPdu->pduSize);
            return;
        }
        switch(pDlPdu->pduType)
        {
            case FAPI_DCI_DL_PDU:
            {
                lteMacUpdateFapiDlConfDciStats(
                        /* +- SPR 17777 */
                        pDlPdu->pduSize, internalCellIndex);
                break;
            }
            case FAPI_BCH_PDU:
            {
                lteMacUpdateFapiDlConfBchStats(
                        &pDlPdu->dlConfigpduInfo.BCHPdu,
                        pDlPdu->pduSize, internalCellIndex);
                break;
            }
            case FAPI_MCH_PDU:
            {
                lteMacUpdateFapiDlConfMchStats(
                        &pDlPdu->dlConfigpduInfo.MCHPdu, pDlPdu->pduSize, 
                        internalCellIndex);
                break;
            }
            case FAPI_DLSCH_PDU:
            {
                lteMacUpdateFapiDlConfDlschStats(
                        &pDlPdu->dlConfigpduInfo.DlSCHPdu,
                        pDlPdu->pduSize, internalCellIndex);
                break;
            }
            case FAPI_PCH_PDU:
            {
                lteMacUpdateFapiDlConfPchStats(
                        &pDlPdu->dlConfigpduInfo.PCHPdu,
                        pDlPdu->pduSize, internalCellIndex);
                break;
            }
            default:
            {
                lteWarning("Unknown PDU type in DL CONFIG REQUEST [%d]\n",
                        pDlPdu->pduType);
                break;
            }
        }
        pDlPdu = (FAPI_dlConfigPDUInfo_st *)
            (((UInt8 *)pDlPdu) + pDlPdu->pduSize);
    }
}

/****************************************************************************
* Function Name  : lteMacUpdateFapiUlConfUlschStats
* Inputs         : pPdu - PDU being sent to PHY interface
*                  pduLen - length of pdu in bytes.
*                  internalCellIndex - cell id  
* Outputs        : None
* Returns        : None
* Description    : This function updates stats for FAPI UL CONFIG REQUEST
*                  message ULSCH PDU.
****************************************************************************/
static  void lteMacUpdateFapiUlConfUlschStats(
        /* +- SPR 17777*/
        UInt32 pduLen, 
        /* +- SPR 17777*/
        InternalCellIndex internalCellIndex)
{
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.
        ulConfReqStats.ulschStats.numPdu++;
    LTE_MAC_STATS_RF_TTI_STATS(internalCellIndex).msgTx |= 
        LTE_MAC_STATS_RF_TX_UL_CONFIG_ULSCH;
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.
        ulConfReqStats.ulschStats.numBytes += pduLen;
}

/****************************************************************************
* Function Name  : lteMacUpdateFapiUlConfUlschCqiRiStats
* Inputs         : pPdu - PDU being sent to PHY interface
*                  pduLen - length of pdu in bytes.
*                  internalCellIndex - cell id  
* Outputs        : None
* Returns        : None
* Description    : This function updates stats for FAPI UL CONFIG REQUEST
*                  message ULSCH_CQI_RI PDU.
****************************************************************************/
static  void lteMacUpdateFapiUlConfUlschCqiRiStats(
        /* +- SPR 17777*/
        UInt32 pduLen, 
        /* +- SPR 17777*/
        InternalCellIndex internalCellIndex)
{
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.ulConfReqStats.
        ulschCqiRiStats.numPdu++;
    LTE_MAC_STATS_RF_TTI_STATS(internalCellIndex).msgTx |=
        LTE_MAC_STATS_RF_TX_UL_CONFIG_ULSCH_CQI_RI;
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.ulConfReqStats.
        ulschCqiRiStats.numBytes += pduLen;
}

/****************************************************************************
* Function Name  : lteMacUpdateFapiUlConfUlschHarqStats
* Inputs         : pPdu - PDU being sent to PHY interface
*                  pduLen - length of pdu in bytes.
*                  internalCellIndex - cell id  
* Outputs        : None
* Returns        : None
* Description    : This function updates stats for FAPI UL CONFIG REQUEST
*                  message ULSCH_HARQ PDU.
****************************************************************************/
static  void lteMacUpdateFapiUlConfUlschHarqStats(
        /* +- SPR 17777*/
        UInt32 pduLen, 
        /* +- SPR 17777*/
        InternalCellIndex internalCellIndex)
{
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.ulConfReqStats.
        ulschHarqStats.numPdu++;
    LTE_MAC_STATS_RF_TTI_STATS(internalCellIndex).msgTx |=
        LTE_MAC_STATS_RF_TX_UL_CONFIG_ULSCH_HARQ;
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.ulConfReqStats.
        ulschHarqStats.numBytes += pduLen;
}

/****************************************************************************
* Function Name  : lteMacUpdateFapiUlConfUlschCqiHarqRiStats
* Inputs         : pPdu - PDU being sent to PHY interface
*                  pduLen - length of pdu in bytes.
*                  internalCellIndex - cell id  
* Outputs        : None
* Returns        : None
* Description    : This function updates stats for FAPI UL CONFIG REQUEST
*                  message ULSCH_CQI_HARQ_RI.
****************************************************************************/
static  void lteMacUpdateFapiUlConfUlschCqiHarqRiStats(
        /* +- SPR 17777*/
        UInt32 pduLen, 
        /* +- SPR 17777*/
        InternalCellIndex internalCellIndex)
{
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.ulConfReqStats.
        ulschCqiHarqRiStats.numPdu++;
    LTE_MAC_STATS_RF_TTI_STATS(internalCellIndex).msgTx |=
        LTE_MAC_STATS_RF_TX_UL_CONFIG_ULSCH_CQI_HARQ_RI;
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.ulConfReqStats.
        ulschCqiHarqRiStats.numBytes += pduLen;
}

/****************************************************************************
* Function Name  : lteMacUpdateFapiUlConfUciCqiStats
* Inputs         : pPdu - PDU being sent to PHY interface
*                  pduLen - length of pdu in bytes.
*                  internalCellIndex - cell id  
* Outputs        : None
* Returns        : None
* Description    : This function updates stats for FAPI UL CONFIG REQUEST
*                  message UCI_CQI PDU.
****************************************************************************/
static  void lteMacUpdateFapiUlConfUciCqiStats(
        /* +- SPR 17777*/
        UInt32 pduLen, 
        /* +- SPR 17777*/
        InternalCellIndex internalCellIndex)
{
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.ulConfReqStats.
        uciCqiStats.numPdu++;
    LTE_MAC_STATS_RF_TTI_STATS(internalCellIndex).msgTx |= 
        LTE_MAC_STATS_RF_TX_UL_CONFIG_UCI_CQI;
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.ulConfReqStats.
        uciCqiStats.numBytes += pduLen;
}

/****************************************************************************
* Function Name  : lteMacUpdateFapiUlConfUciSrStats
* Inputs         : pPdu - PDU being sent to PHY interface
*                  pduLen - length of pdu in bytes.
*                  internalCellIndex - cell id  
* Outputs        : None
* Returns        : None
* Description    : This function updates stats for FAPI UL CONFIG REQUEST
*                  message UCI_SR PDU.
****************************************************************************/
static  void lteMacUpdateFapiUlConfUciSrStats(
        /* +- SPR 17777*/
        UInt32 pduLen,
        /* +- SPR 17777*/
        InternalCellIndex internalCellIndex)
{
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.ulConfReqStats.
        uciSrStats.numPdu++;
    LTE_MAC_STATS_RF_TTI_STATS(internalCellIndex).msgTx |= 
        LTE_MAC_STATS_RF_TX_UL_CONFIG_UCI_SR;
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.ulConfReqStats.
        uciSrStats.numBytes += pduLen;
}

/****************************************************************************
* Function Name  : lteMacUpdateFapiUlConfUciHarqStats
* Inputs         : pPdu - PDU being sent to PHY interface
*                  pduLen - length of pdu in bytes.
*                  internalCellIndex - cell id  
* Outputs        : None
* Returns        : None
* Description    : This function updates stats for FAPI UL CONFIG REQUEST
*                  message UCI_HARQ PDU.
****************************************************************************/
static  void lteMacUpdateFapiUlConfUciHarqStats(
        /* +- SPR 17777*/
        UInt32 pduLen,
        /* +- SPR 17777*/
        InternalCellIndex internalCellIndex)
{
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.ulConfReqStats.
        uciHarqStats.numPdu++;
    LTE_MAC_STATS_RF_TTI_STATS(internalCellIndex).msgTx |= 
        LTE_MAC_STATS_RF_TX_UL_CONFIG_UCI_HARQ;
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.ulConfReqStats.
        uciHarqStats.numBytes += pduLen;
}

/****************************************************************************
* Function Name  : lteMacUpdateFapiUlConfUciSrHarqStats
* Inputs         : pPdu - PDU being sent to PHY interface
*                  pduLen - length of pdu in bytes.
*                  internalCellIndex - cell id  
* Outputs        : None
* Returns        : None
* Description    : This function updates stats for FAPI UL CONFIG REQUEST
*                  message UCI_SR_HARQ PDU.
****************************************************************************/
static  void lteMacUpdateFapiUlConfUciSrHarqStats(
        /* +- SPR 17777*/
        UInt32 pduLen,
        /* +- SPR 17777*/
        InternalCellIndex internalCellIndex)
{
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.ulConfReqStats.
        uciSrHarqStats.numPdu++;
    LTE_MAC_STATS_RF_TTI_STATS(internalCellIndex).msgTx |=
        LTE_MAC_STATS_RF_TX_UL_CONFIG_UCI_SR_HARQ;
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.ulConfReqStats.
        uciSrHarqStats.numBytes += pduLen;
}

/****************************************************************************
* Function Name  : lteMacUpdateFapiUlConfUciCqiHarqStats
* Inputs         : pPdu - PDU being sent to PHY interface
*                  pduLen - length of pdu in bytes.
*                  internalCellIndex - cell id  
* Outputs        : None
* Returns        : None
* Description    : This function updates stats for FAPI UL CONFIG REQUEST
*                  message UCI_CQI_HARQ PDU.
****************************************************************************/
static  void lteMacUpdateFapiUlConfUciCqiHarqStats(
        /* +- SPR 17777*/
        UInt32 pduLen, 
        /* +- SPR 17777*/
        InternalCellIndex internalCellIndex)
{
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.ulConfReqStats.
        uciCqiHarqStats.numPdu++;
    LTE_MAC_STATS_RF_TTI_STATS(internalCellIndex).msgTx |=
        LTE_MAC_STATS_RF_TX_UL_CONFIG_UCI_CQI_HARQ;
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.ulConfReqStats.
        uciCqiHarqStats.numBytes += pduLen;
}

/****************************************************************************
* Function Name  : lteMacUpdateFapiUlConfUciCqiSrStats
* Inputs         : pPdu - PDU being sent to PHY interface
*                  pduLen - length of pdu in bytes.
*                  internalCellIndex - cell id  
* Outputs        : None
* Returns        : None
* Description    : This function updates stats for FAPI UL CONFIG REQUEST
*                  message UCI_CQI_SR PDU.
****************************************************************************/
static  void lteMacUpdateFapiUlConfUciCqiSrStats(
        /* +- SPR 17777*/
         UInt32 pduLen, 
         /* +- SPR 17777*/
        InternalCellIndex internalCellIndex)
{
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.ulConfReqStats.
        uciCqiSrStats.numPdu++;
    LTE_MAC_STATS_RF_TTI_STATS(internalCellIndex).msgTx |=
        LTE_MAC_STATS_RF_TX_UL_CONFIG_UCI_CQI_SR;
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.ulConfReqStats.
        uciCqiSrStats.numBytes += pduLen;
}

/****************************************************************************
* Function Name  : lteMacUpdateFapiUlConfUciCqiSrHarqStats
* Inputs         : pPdu - PDU being sent to PHY interface
*                  pduLen - length of pdu in bytes.
*                  internalCellIndex - cell id  
* Outputs        : None
* Returns        : None
* Description    : This function updates stats for FAPI UL CONFIG REQUEST
*                  message UCI_CQI_SR_HARQ PDU.
****************************************************************************/
static  void lteMacUpdateFapiUlConfUciCqiSrHarqStats(
        /* +- SPR 17777*/
        UInt32 pduLen, 
        /* +- SPR 17777*/
        InternalCellIndex internalCellIndex)
{
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.ulConfReqStats.
        uciCqiSrHarqStats.numPdu++;
    LTE_MAC_STATS_RF_TTI_STATS(internalCellIndex).msgTx |=
        LTE_MAC_STATS_RF_TX_UL_CONFIG_UCI_CQI_SR_HARQ;
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.ulConfReqStats.
        uciCqiSrHarqStats.numBytes += pduLen;
}

/****************************************************************************
* Function Name  : lteMacUpdateFapiUlConfSrsStats
* Inputs         : pPdu - PDU being sent to PHY interface
*                  pduLen - length of pdu in bytes.
*                  internalCellIndex - cell id  
* Outputs        : None
* Returns        : None
* Description    : This function updates stats for FAPI UL CONFIG REQUEST
*                  message SRS PDU.
****************************************************************************/
static  void lteMacUpdateFapiUlConfSrsStats(
        /* +- SPR 17777*/
        UInt32 pduLen, 
        /* +- SPR 17777*/
        InternalCellIndex internalCellIndex)
{
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.ulConfReqStats.
        srsStats.numPdu++;
    LTE_MAC_STATS_RF_TTI_STATS(internalCellIndex).msgTx |= 
        LTE_MAC_STATS_RF_TX_UL_CONFIG_SRS;
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.
        ulConfReqStats.srsStats.numBytes += pduLen;
}

/****************************************************************************
* Function Name  : lteMacUpdateFapiUlConfReqStats
* Inputs         : pUlConfReq pointer to strucure FAPI_ulConfigRequest_st
*                  internalCellIndex - cell id  
* Outputs        : None
* Returns        : None
* Description    : This function updates stats for FAPI UL CONFIG REQUEST
*                  message.
****************************************************************************/

/*Rel_523_Coverity_10166 Fix start*/ 
static  void lteMacUpdateFapiUlConfReqStats(FAPI_ulConfigRequest_st  *pUlConfReq,
        InternalCellIndex internalCellIndex)
/*Rel_523_Coverity_10166 Fix start*/ 
{
    FAPI_ulPDUConfigInfo_st     *pUlPdu = PNULL;
    UInt32      iterator = 0;
    UInt32      remainingLen = 0;
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.
        ulConfReqStats.numMsgs++;
    LTE_MAC_STATS_RF_TTI_STATS(internalCellIndex).msgTx |= 
        LTE_MAC_STATS_RF_TX_UL_CONFIG;
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.
        ulConfReqStats.numPdu += pUlConfReq->numOfPdu;
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.
        ulConfReqStats.numBytes += pUlConfReq->ulConfigLen;

    remainingLen = pUlConfReq->ulConfigLen;
    pUlPdu = (FAPI_ulPDUConfigInfo_st *)pUlConfReq->ulPduConfigInfo;
    for (; iterator < pUlConfReq->numOfPdu; iterator++)
    {
        if (remainingLen < pUlPdu->ulConfigPduSize)
        {
            LTE_MAC_UT_LOG(LOG_WARNING, OAM_STAT_MGR,"Length of UL CONFIG PDU is too large [%d]\n",
                    pUlPdu->ulConfigPduSize);
        }
        switch(pUlPdu->ulConfigPduType)
        {
            case FAPI_ULSCH:
            {
                lteMacUpdateFapiUlConfUlschStats(
                        /* +- SPR 17777 */
                        pUlPdu->ulConfigPduSize, internalCellIndex);
                break;
            }
            case FAPI_ULSCH_CQI_RI:
            {
                lteMacUpdateFapiUlConfUlschCqiRiStats(
                        /* +- SPR 17777 */
                        pUlPdu->ulConfigPduSize, internalCellIndex);
                break;
            }
            case FAPI_ULSCH_HARQ:
            {
                lteMacUpdateFapiUlConfUlschHarqStats(
                        /* +- SPR 17777 */
                        pUlPdu->ulConfigPduSize, internalCellIndex);
                break;
            }
            case FAPI_ULSCH_CQI_HARQ_RI:
            {
                lteMacUpdateFapiUlConfUlschCqiHarqRiStats(
                        /* +- SPR 17777 */
                        pUlPdu->ulConfigPduSize, internalCellIndex);
                break;
            }
            case FAPI_UCI_CQI:
            {
                lteMacUpdateFapiUlConfUciCqiStats(
                        /* +- SPR 17777 */
                        pUlPdu->ulConfigPduSize, internalCellIndex);
                break;
            }
            case FAPI_UCI_SR:
            {
                lteMacUpdateFapiUlConfUciSrStats(
                        /* +- SPR 17777 */
                        pUlPdu->ulConfigPduSize, internalCellIndex);
                break;
            }
            case FAPI_UCI_HARQ:
            {
                lteMacUpdateFapiUlConfUciHarqStats(
                        /* +- SPR 17777 */
                        pUlPdu->ulConfigPduSize, internalCellIndex);
                break;
            }
            case FAPI_UCI_SR_HARQ:
            {
                lteMacUpdateFapiUlConfUciSrHarqStats(
                        /* +- SPR 17777 */
                        pUlPdu->ulConfigPduSize, internalCellIndex);
                break;
            }
            case FAPI_UCI_CQI_HARQ:
            {
                lteMacUpdateFapiUlConfUciCqiHarqStats(
                        /* +- SPR 17777 */
                        pUlPdu->ulConfigPduSize, internalCellIndex);
                break;
            }
            case FAPI_UCI_CQI_SR:
            {
                lteMacUpdateFapiUlConfUciCqiSrStats(
                        /* +- SPR 17777 */
                        pUlPdu->ulConfigPduSize, internalCellIndex);
                break;
            }
            case FAPI_UCI_CQI_SR_HARQ:
            {
                lteMacUpdateFapiUlConfUciCqiSrHarqStats(
                        /* +- SPR 17777 */
                        pUlPdu->ulConfigPduSize, internalCellIndex);
                break;
            }
            case FAPI_SRS:
            {
                lteMacUpdateFapiUlConfSrsStats(
                        /* +- SPR 17777 */
                        pUlPdu->ulConfigPduSize, internalCellIndex);
                break;
            }
            default:
            {
                lteWarning("Unknown PDU type in UL CONFIG REQUEST [%d]\n",
                        pUlPdu->ulConfigPduType);
                break;
            }
        }
        remainingLen -= pUlPdu->ulConfigPduSize;
        pUlPdu = (FAPI_ulPDUConfigInfo_st *)
            (((UInt8 *)pUlPdu) + pUlPdu->ulConfigPduSize);
    }
}

/****************************************************************************
* Function Name  : lteMacUpdateFapiHiDci0ReqStats
* Inputs         : pBufferToSend - buffer being sent to PHY interface,
*                  bufferLen - length pf buffer in bytes.
*                  internalCellIndex - cell id  
* Outputs        : None
* Returns        : None
* Description    : This function updates stats for FAPI HI DCI0 REQUEST
*                  message.
****************************************************************************/
static  void lteMacUpdateFapiHiDci0ReqStats(UInt8 *pBufferToSend,
        /* +- SPR 17777 */
        InternalCellIndex internalCellIndex)
{
    FAPI_dlHiDCIPduInfo_st      *pHiDciMsg = (FAPI_dlHiDCIPduInfo_st *)
        ((FAPI_l1ApiMsg_st *)pBufferToSend)->msgBody;

    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.
        hiDci0ReqStats.numMsgs++;
    LTE_MAC_STATS_RF_TTI_STATS(internalCellIndex).msgTx |= 
        LTE_MAC_STATS_RF_TX_HI_DCI0_REQ;
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.
        hiDci0ReqStats.numHi += pHiDciMsg->numOfHI;
    if (0 < pHiDciMsg->numOfHI)
    {
        LTE_MAC_STATS_RF_TTI_STATS(internalCellIndex).msgTx |= 
            LTE_MAC_STATS_RF_TX_HI_DCI0_HI;
    }
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.
        hiDci0ReqStats.numDci0 += pHiDciMsg->numOfDCI;
    if (0 < pHiDciMsg->numOfDCI)
    {
        LTE_MAC_STATS_RF_TTI_STATS(internalCellIndex).msgTx |= 
            LTE_MAC_STATS_RF_TX_HI_DCI0_DCI0;
    }
}

/****************************************************************************
* Function Name  : lteMacUpdateFapiTxReqDlschStats
* Inputs         : pPdu - PDU being sent to PHY interface,
*                  pduLen - length of pdu in bytes.
*                  internalCellIndex - cell id  
* Outputs        : None
* Returns        : None
* Description    : This function updates stats for FAPI TX REQUEST
*                  message DLSCH PDU.
****************************************************************************/
/* +- SPR 17777*/
static  void lteMacUpdateFapiTxReqDlschStats(
        /* +- SPR 17777*/
        UInt32 pduLen, InternalCellIndex internalCellIndex)
{
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.
        txReqStats.dlschStats.numPdu++;
    LTE_MAC_STATS_RF_TTI_STATS(internalCellIndex).msgTx |= LTE_MAC_STATS_RF_TX_TX_REQ_DLSCH;
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.
        txReqStats.dlschStats.numBytes += offsetof(FAPI_dlPduInfo_st, dlTLVInfo);
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.
        txReqStats.dlschStats.numBytes += pduLen;
}

/****************************************************************************
* Function Name  : lteMacUpdateFapiTxReqBchStats
* Inputs         : pPdu - PDU being sent to PHY interface,
*                  pduLen - length of pdu in bytes.
*                  internalCellIndex - cell id  
* Outputs        : None
* Returns        : None
* Description    : This function updates stats for FAPI TX REQUEST
*                  message BCH PDU.
****************************************************************************/
/* +- SPR 17777*/
static  void lteMacUpdateFapiTxReqBchStats(
/* +- SPR 17777*/
        UInt32 pduLen, InternalCellIndex internalCellIndex)
{
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.
        txReqStats.bchStats.numPdu++;
    LTE_MAC_STATS_RF_TTI_STATS(internalCellIndex).msgTx |= 
        LTE_MAC_STATS_RF_TX_TX_REQ_BCH;
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.
        txReqStats.bchStats.numBytes += offsetof(FAPI_dlPduInfo_st, dlTLVInfo);
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.
        txReqStats.bchStats.numBytes += pduLen;
}

/****************************************************************************
* Function Name  : lteMacUpdateFapiTxReqMchStats
* Inputs         : pPdu - PDU being sent to PHY interface,
*                  pduLen - length of pdu in bytes.
*                  internalCellIndex - cell id  
* Outputs        : None
* Returns        : None
* Description    : This function updates stats for FAPI TX REQUEST
*                  message MCH PDU.
*
****************************************************************************/
/* +- SPR 17777*/
static  void lteMacUpdateFapiTxReqMchStats(
/* +- SPR 17777*/
        UInt32 pduLen, InternalCellIndex internalCellIndex)
{
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.
        txReqStats.mchStats.numPdu++;
    LTE_MAC_STATS_RF_TTI_STATS(internalCellIndex).msgTx |= 
        LTE_MAC_STATS_RF_TX_TX_REQ_MCH;
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.
        txReqStats.mchStats.numBytes += offsetof(FAPI_dlPduInfo_st, dlTLVInfo);
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.
        txReqStats.mchStats.numBytes += pduLen;
}

/****************************************************************************
* Function Name  : lteMacUpdateFapiTxReqPchStats
* Inputs         : pPdu - PDU being sent to PHY interface,
*                  pduLen - length of pdu in bytes.
*                  internalCellIndex - cell id  
* Outputs        : None
* Returns        : None
* Description    : This function updates stats for FAPI TX REQUEST
*                  message PCH PDU.
****************************************************************************/
/* +- SPR 17777*/
static  void lteMacUpdateFapiTxReqPchStats(
/* +- SPR 17777*/
        UInt32 pduLen, InternalCellIndex internalCellIndex)
{
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.
        txReqStats.pchStats.numPdu++;
    LTE_MAC_STATS_RF_TTI_STATS(internalCellIndex).msgTx |= 
        LTE_MAC_STATS_RF_TX_TX_REQ_PCH;
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.
        txReqStats.pchStats.numBytes += offsetof(FAPI_dlPduInfo_st, dlTLVInfo);
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.
        txReqStats.pchStats.numBytes +=
        pduLen;
}

/****************************************************************************
* Function Name  : lteMacUpdateFapiTxReqStats
* Inputs         : pTxReq - pointer to structure FAPI_dlDataTxRequest_st
*                  internalCellIndex - cell id  
* Outputs        : None
* Returns        : None
* Description    : This function updates stats for FAPI TX REQUEST
*                  message.
****************************************************************************/

/*Rel_523_Coverity_10164 Fix start*/ 
static  void lteMacUpdateFapiTxReqStats(FAPI_dlDataTxRequest_st     *pTxReq,
        InternalCellIndex internalCellIndex)
/*Rel_523_Coverity_10164 Fix start*/ 
{
    FAPI_dlPduInfo_st           *pPdu = PNULL;
    UInt32      iterator = 0;
    UInt32      dataLen = 0;

    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.
        txReqStats.numMsgs++;
    LTE_MAC_STATS_RF_TTI_STATS(internalCellIndex).msgTx |= 
        LTE_MAC_STATS_RF_TX_TX_REQ;
    gMacStats.pStats->phyStats[internalCellIndex].fapiTxStats.
        txReqStats.numPdu += pTxReq->numOfPDU;

    pPdu = pTxReq->dlPduInfo;
    for (; iterator < pTxReq->numOfPDU; iterator++)
    {
        /*SPR 2235 Fix Begin*/
        if (LTE_MAC_STATS_MAX_PDU <= pPdu->pduIndex) 
            /*SPR 2235 Fix End*/
        {
            lteWarning("PDU Index too large in TX REQUEST [%d]\n",
                    pPdu->pduIndex);
            return;
        }
        switch(lLteMacPduIdxToPduType[internalCellIndex][pPdu->pduIndex])
        {
            case FAPI_BCH_PDU:
            {
                /* +- SPR 17777 */
                lteMacUpdateFapiTxReqBchStats( pPdu->pduLen, 
                        internalCellIndex);
                dataLen += pPdu->pduLen;
                break;
            }
            case FAPI_MCH_PDU:
            {
                /* +- SPR 17777 */
                lteMacUpdateFapiTxReqMchStats( pPdu->pduLen, 
                        internalCellIndex);
                dataLen += pPdu->pduLen;
                break;
            }
            case FAPI_DLSCH_PDU:
            {
                /* +- SPR 17777 */
                lteMacUpdateFapiTxReqDlschStats( pPdu->pduLen, 
                        internalCellIndex);
                dataLen += pPdu->pduLen;
                break;
            }
            case FAPI_PCH_PDU:
            {
                /* +- SPR 17777 */
                lteMacUpdateFapiTxReqPchStats( pPdu->pduLen, 
                        internalCellIndex);
                dataLen += pPdu->pduLen;
                break;
            }
            default:
            {
                lteWarning("Invalid PDU type/PDU type not received in DL "
                        "CONFIG REQUEST for TX PDU [%d]\n",
                        lLteMacPduIdxToPduType[internalCellIndex][pPdu->pduIndex]);
                break;
            }
        }
        lLteMacPduIdxToPduType[internalCellIndex][pPdu->pduIndex] = 0;
        pPdu = (FAPI_dlPduInfo_st *)(((UInt8 *)pPdu) + pPdu->pduLen);
    }
    LTE_MAC_STATS_RF_TTI_STATS(internalCellIndex).dlSize = dataLen;
    LTE_MAC_STATS_RF_TTI_STATS(internalCellIndex).numTxPdu = pTxReq->numOfPDU;
}

/****************************************************************************
* Function Name  : lteMacUpdatePhyFapiTxStats
* Inputs         : pBufferToSend - buffer being sent to PHY interface,
*                  bufferLen - length pf buffer in bytes.
*                  internalCellIndex - cell id  
* Outputs        : None
* Returns        : None
* Description    : This function updates stats for FAPI TX messages.
****************************************************************************/
static  void lteMacUpdatePhyFapiTxStats(UInt8 *pBufferToSend,
                /* +- SPR 17777 */
        InternalCellIndex internalCellIndex)
{
    FAPI_l1ApiMsg_st        *pL1Api = (FAPI_l1ApiMsg_st *)pBufferToSend;

    switch(pL1Api->msgId)
    {
        case PHY_PARAM_REQUEST:
        {
            /* +- SPR 17777 */
            lteMacUpdateFapiParReqStats(internalCellIndex);
            break;
        }
        case PHY_CELL_CONFIG_REQUEST:
        {
            /* +- SPR 17777 */
            lteMacUpdateFapiCellConfReqStats(pBufferToSend,
                    internalCellIndex);
            break;
        }
        case PHY_START_REQUEST:
        {
            /* +- SPR 17777 */
            lteMacUpdateFapiStartReqStats(
                    internalCellIndex);
            break;
        }
        case PHY_STOP_REQUEST:
        {
            /* +- SPR 17777 */
            lteMacUpdateFapiStopReqStats(
                    internalCellIndex);
            break;
        }
        case PHY_UE_CONFIG_REQUEST:
        {
            /*Rel_523_Coverity_10165 Fix start*/ 
            FAPI_ueConfigRequest_st     *pUeConfReq = (FAPI_ueConfigRequest_st *)pL1Api->msgBody;
            lteMacUpdateFapiUeConfReqStats(pUeConfReq, internalCellIndex);
            /*Rel_523_Coverity_10165 Fix end*/ 
            break;
        }
        case PHY_DL_CONFIG_REQUEST:
        {
            /*Rel_523_Coverity_10162 Fix start*/ 
            FAPI_dlConfigRequest_st     *pDlConfReq = (FAPI_dlConfigRequest_st *)pL1Api->msgBody;
            lteMacUpdateFapiDlConfReqStats(pDlConfReq, internalCellIndex);
            /*Rel_523_Coverity_10162 Fix end*/ 
            break;
        }
        case PHY_UL_CONFIG_REQUEST:
        {

            /*Rel_523_Coverity_10166 Fix start*/ 
            FAPI_ulConfigRequest_st     *pUlConfReq = (FAPI_ulConfigRequest_st *)pL1Api->msgBody;
            lteMacUpdateFapiUlConfReqStats(pUlConfReq, internalCellIndex);
            /*Rel_523_Coverity_10166 Fix end*/ 
            break;
        }
        case PHY_DL_HI_DCI0_REQUEST:
        {
            /* +- SPR 17777 */
            lteMacUpdateFapiHiDci0ReqStats(pBufferToSend,
                    internalCellIndex);
            break;
        }
        case PHY_DL_TX_REQUEST:
        {
            /*Rel_523_Coverity_10164 Fix start*/ 
            FAPI_dlDataTxRequest_st   *pTxReq = (FAPI_dlDataTxRequest_st *)pL1Api->msgBody;
            lteMacUpdateFapiTxReqStats(pTxReq, internalCellIndex);
            /*Rel_523_Coverity_10164 Fix end*/ 
            break;
        }
        default:
        {
            lteWarning("Invalid Msg ID in L1 API message [%d]\n",
                    pL1Api->msgId);
            break;
        }
    }
}

/****************************************************************************
* Function Name  : lteMacUpdateStatsPhyTx 
* Inputs         : pBufferToSend - buffer being sent to PHY interface,
*                  bufferLen - length pf buffer in bytes.
*                  internalCellIndex - cell id  
* Outputs        : None
* Returns        : None
* Description    : This function updates the stats for data being sent to
*                  PHY interface.
****************************************************************************/
void lteMacUpdateStatsPhyTx(UInt8 *pBufferToSend, UInt32 bufferLen,
        InternalCellIndex internalCellIndex)
{
    /* If stats memory is not mapped, just return */
    if (PNULL == gMacStats.pStats)
    {
        return;
    }

    if (PNULL == pBufferToSend)
    {
        return;
    }

    /* update phy TX stats */
    gMacStats.pStats->phyStats[internalCellIndex].txStats.numMsgs++;
    gMacStats.pStats->phyStats[internalCellIndex].txStats.numBytes += bufferLen;

/* FAPI Changes */
    /* Update FAPI phy stats */
    /* +- SPR 17777 */
    lteMacUpdatePhyFapiTxStats(pBufferToSend,internalCellIndex);
}

/****************************************************************************
* Function Name  : lteMacUpdateFapiParRespStats
* Inputs         : pBufferToSend - buffer being sent to PHY interface,
*                  bufferLen - length pf buffer in bytes.
*                  internalCellIndex - cell id  
* Outputs        : None
* Returns        : None
* Description    : This function updates stats for FAPI PARAM RESPONSE
*                  message.
****************************************************************************/
static  void lteMacUpdateFapiParRespStats(UInt8 *pBufferToSend,
        /* +- SPR 17777*/
        InternalCellIndex internalCellIndex)
/* +- SPR 17777*/
{
    FAPI_paramResponse_st       *pParResp = (FAPI_paramResponse_st *)
        ((FAPI_l1ApiMsg_st *)pBufferToSend)->msgBody;

    gMacStats.pStats->phyStats[internalCellIndex].fapiRxStats.
        parRespStats.numMsgs++;
    LTE_MAC_STATS_RF_TTI_STATS(internalCellIndex).msgRx |= 
        LTE_MAC_STATS_RF_RX_PARAM_RESP;
    gMacStats.pStats->phyStats[internalCellIndex].fapiRxStats.
        parRespStats.numTlvs += pParResp->numOfTlv;
}

/****************************************************************************
* Function Name  : lteMacUpdateFapiCellConfRespStats
* Inputs         : pBufferToSend - buffer being sent to PHY interface,
*                  bufferLen - length pf buffer in bytes.
*                  internalCellIndex - cell id  
* Outputs        : None
* Returns        : None
* Description    : This function updates stats for FAPI CELL CONFIG RESPONSE
*                  message.
****************************************************************************/
static  void lteMacUpdateFapiCellConfRespStats(UInt8 *pBufferToSend,
/* +- SPR 17777*/
        InternalCellIndex internalCellIndex)
/* +- SPR 17777*/
{
    FAPI_phyCellConfigResp_st   *pCellConfResp = (FAPI_phyCellConfigResp_st *)
        ((FAPI_l1ApiMsg_st *)pBufferToSend)->msgBody;

    LTE_MAC_STATS_RF_TTI_STATS(internalCellIndex).msgRx |= 
        LTE_MAC_STATS_RF_RX_CELL_CONFIG_RESP;
    if (FAPI_MSG_OK == pCellConfResp->errorCode)
    {
        gMacStats.pStats->phyStats[internalCellIndex].fapiRxStats.
            cellConfRespStats.numOk++;
    }
    else
    {
        gMacStats.pStats->phyStats[internalCellIndex].fapiRxStats.
            cellConfRespStats.numFail++;
        gMacStats.pStats->phyStats[internalCellIndex].fapiRxStats.
            cellConfRespStats.numInvalidTlvs += pCellConfResp->numOfInvalidOrUnsupportedTLV;
        gMacStats.pStats->phyStats[internalCellIndex].fapiRxStats.
            cellConfRespStats.numMissingTlvs += pCellConfResp->numOfMissingTLV;
    }
}

/****************************************************************************
* Function Name  : lteMacUpdateFapiStopIndStats
* Inputs         : pBufferToSend - buffer being sent to PHY interface,
*                  bufferLen - length pf buffer in bytes.
*                  internalCellIndex - cell id  
* Outputs        : None
* Returns        : None
* Description    : This function updates stats for FAPI STOP INDICATION
*                  message.
****************************************************************************/
/* +- SPR 17777*/
static  void lteMacUpdateFapiStopIndStats(
        InternalCellIndex internalCellIndex)
/* +- SPR 17777*/
{
    gMacStats.pStats->phyStats[internalCellIndex].fapiRxStats.
        stopIndStats.numMsgs++;
    LTE_MAC_STATS_RF_TTI_STATS(internalCellIndex).msgRx |= 
        LTE_MAC_STATS_RF_RX_STOP_IND;
}

/****************************************************************************
* Function Name  : lteMacUpdateFapiUeConfRespStats
* Inputs         : pBufferToSend - buffer being sent to PHY interface
*                  bufferLen - length pf buffer in bytes.
*                  internalCellIndex - cell id  
* Outputs        : None
* Returns        : None
* Description    : This function updates stats for FAPI UE CONFIG RESPONSE
*                  message.
****************************************************************************/
static  void lteMacUpdateFapiUeConfRespStats(UInt8 *pBufferToSend,
/* +- SPR 17777*/
        InternalCellIndex internalCellIndex)
/* +- SPR 17777*/
{
    FAPI_phyUeConfigResp_st     *pUeConfResp = (FAPI_phyUeConfigResp_st *)
        ((FAPI_l1ApiMsg_st *)pBufferToSend)->msgBody;
    FAPI_ueConfig_st            *pTlv = PNULL;
    UInt32      iterator = 0;

    /*+ Klockwork warning removal*/
    pTlv = pUeConfResp->listOfTLV;
    /*- Klockwork warning removal*/
    LTE_MAC_STATS_RF_TTI_STATS(internalCellIndex).msgRx |= 
        LTE_MAC_STATS_RF_RX_UE_CONFIG_RESP;
    if (FAPI_MSG_OK == pUeConfResp->errorCode)
    {
        gMacStats.pStats->phyStats[internalCellIndex].fapiRxStats.
            ueConfRespStats.numOk++;
    }
    else
    {
        gMacStats.pStats->phyStats[internalCellIndex].fapiRxStats.
            ueConfRespStats.numFail++;
        gMacStats.pStats->phyStats[internalCellIndex].fapiRxStats.
            ueConfRespStats.numInvalidTlvs += pUeConfResp->numOfInvalidOrUnsupportedTLV;
        gMacStats.pStats->phyStats[internalCellIndex].fapiRxStats.
            ueConfRespStats.numMissingTlvs += pUeConfResp->numOfMissingTLV;
    }
    gMacStats.pStats->phyStats[internalCellIndex].fapiRxStats.
        ueConfRespStats.numBytes +=
        offsetof(FAPI_phyUeConfigResp_st, listOfTLV);
    for (; iterator < pUeConfResp->numOfInvalidOrUnsupportedTLV +
            pUeConfResp->numOfMissingTLV; iterator ++)
    {
        gMacStats.pStats->phyStats[internalCellIndex].fapiRxStats.
            ueConfRespStats.numBytes += pTlv->tagLen;
        pTlv = (FAPI_ueConfig_st *)(((UInt8 *)pTlv) + pTlv->tagLen);
    }
}

/****************************************************************************
* Function Name  : lteMacUpdateFapiErrIndStats
* Inputs         : pBufferToSend - buffer being sent to PHY interface,
*                  bufferLen - length pf buffer in bytes.
*                  internalCellIndex - cell id  
* Outputs        : None
* Returns        : None
* Description    : This function updates stats for FAPI ERROR INDICATION
*                  message.
****************************************************************************/
static  void lteMacUpdateFapiErrIndStats(UInt8 *pBufferToSend,
/* +- SPR 17777*/
        InternalCellIndex internalCellIndex)
/* +- SPR 17777*/
{
    FAPI_phyErrorIndication_st  *pErrInd = (FAPI_phyErrorIndication_st *)
        ((FAPI_l1ApiMsg_st *)pBufferToSend)->msgBody;

    gMacStats.pStats->phyStats[internalCellIndex].fapiRxStats.
        errIndStats.numMsgs++;
    LTE_MAC_STATS_RF_TTI_STATS(internalCellIndex).msgRx |= 
        LTE_MAC_STATS_RF_RX_ERROR_IND;
    gMacStats.pStats->phyStats[internalCellIndex].fapiRxStats.
        errIndStats.numBytes += offsetof(FAPI_phyErrorIndication_st, errMsgBody);
    switch(pErrInd->errorCode)
    {
        case FAPI_MSG_OK:
        {
            /* This error code should never come in error indication msg */
            lteWarning("Error indication received with error code = OK\n");
            break;
        }
        case FAPI_MSG_INVALID_STATE: /* Fall through */
        case FAPI_MSG_BCH_MISSING:
        {
            /* No Message body, so no more length added */
            break;
        }
        case FAPI_MSG_INVALID_CONFIG:
        case FAPI_MSG_SUBFRAME_ERR:
        {
            gMacStats.pStats->phyStats[internalCellIndex].fapiRxStats.
                errIndStats.numBytes +=
                sizeof(FAPI_errMsgBody2_st);
            break;
        }
        case FAPI_SFN_OUT_OF_SYNC: /* Fall through */
        case FAPI_MSG_INVALID_SFN:
        {
            gMacStats.pStats->phyStats[internalCellIndex].fapiRxStats.
                errIndStats.numBytes +=
                sizeof(FAPI_errMsgBody1_st);
            break;
        }
        case FAPI_MSG_HI_ERR:
        {
            gMacStats.pStats->phyStats[internalCellIndex].fapiRxStats.
                errIndStats.numBytes +=
                sizeof(FAPI_errMsgBody3_st);
            break;
        }
        case FAPI_MSG_TX_ERR:
        {
            gMacStats.pStats->phyStats[internalCellIndex].fapiRxStats.
                errIndStats.numBytes +=
                sizeof(FAPI_errMsgBody4_st);
            break;
        }
        default:
        {
            lteWarning("Unknown error code received in ERROR IND [%d]\n", 
                    pErrInd->errorCode);
            break;
        }
    }
}

/****************************************************************************
* Function Name  : lteMacUpdateFapiSfIndStats
* Inputs         : pBufferToSend - buffer being sent to PHY interface,
*                  bufferLen - length pf buffer in bytes.
*                  internalCellIndex - cell id  
* Outputs        : None
* Returns        : None
* Description    : This function updates stats for FAPI SUBFRAME INDICATION
*                  message.
****************************************************************************/
static  void lteMacUpdateFapiSfIndStats(UInt8 *pBufferToSend,
/* +- SPR 17777*/
        InternalCellIndex internalCellIndex)
/* +- SPR 17777*/
{
    FAPI_subFrameIndication_st      *pSfInd = (FAPI_subFrameIndication_st *)
        ((FAPI_l1ApiMsg_st *)pBufferToSend)->msgBody;

    gMacStats.pStats->phyStats[internalCellIndex].fapiRxStats.
        sfIndStats.numMsgs++;
	/* + PERF_CA GBL */
    lLteMacStatsRfSfn_g[internalCellIndex] = GET_SYSFRAMENUM_FROM_SFNSF(pSfInd->sfnsf);
    lLteMacStatsRfSf_g[internalCellIndex] = GET_SUBFRAME_FROM_SFNSF(pSfInd->sfnsf);
