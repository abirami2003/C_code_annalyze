/****************************************************************************
 *
 *  ARICENT -
 *
 *  Copyright (c) 2009 Aricent.
 *
 ****************************************************************************
 * File Details
 * ------------
 *  $Id: uecc_oamh.c,v 1.22 2010/11/16 13:15:36 gur21239 Exp $
 ****************************************************************************
 *
 *   DESCRIPTION:
 *       This is the implementation of the UECC OAMH interface.
 *       UECC OAMH interacts with RRC OAMH module.
 *
 ****************************************************************************
 *
 * Revision Details
 * ----------------
 * $Log: uecc_oamh.c,v $
 * Revision 1.22  2010/11/16 13:15:36  gur21239
 * spr 644 related changes done
 *
 * Revision 1.21  2010/10/13 07:03:49  gur18569
 * Merge from LTE_L3_Rel_2_0_2 tag tag
 *
 * Revision 1.6.4.8  2010/10/05 12:39:41  gur22047
 * compilation warning removed
 *
 * Revision 1.6.4.7  2010/10/04 13:53:58  gur04518
 * Removed TABS
 *
 * Revision 1.6.4.6  2010/09/13 13:04:09  gur18569
 * AFTER MERGE WITH LTE_L3_Rel_2_0_1_1_1 branch
 *
 * Revision 1.6.4.5  2010/08/12 13:45:50  gur18569
 * incoporated review comments for HO
 *
 * Revision 1.6.4.4  2010/08/09 13:54:57  gur22047
 * file modified during ut
 *
 * Revision 1.6.4.3  2010/08/05 08:08:56  gur15697
 * merging round 2
 *
 * Revision 1.6.4.2  2010/07/21 08:40:18  gur15697
 * HO ERAB code Merging changes
 *
 * Revision 1.6.4.1  2010/06/24 12:53:45  gur22047
 * internal source and s1ap code
 *
 * Revision 1.6  2010/04/06 04:02:31  gur18569
 * updating  p_uecc_gb_context->p_p_csc_context.cell_index instead of p_uecc_gb_context->cell_index
 *
 * Revision 1.5  2010/03/24 09:50:42  gur18569
 * Merged files from Rel 1.0 support branch
 *
 * Revision 1.4  2010/02/23 14:09:51  gur22133
 * after_lokesh_ue_cap_code_review_23feb
 *
 * Revision 1.3  2010/02/18 04:19:02  gur10248
 * LTE_RRC_Rel1.1_18feb
 *
 * Revision 1.2  2010/01/04 16:10:05  ukr15916
 * no message
 *
 * Revision 1.1.4.16  2009/12/15 11:54:43  ukr15916
 * srb0 is added during status (srb_num+1)
 *
 * Revision 1.1.4.15  2009/12/09 15:36:26  ukr16032
 * UECC - inspection log items PN_4, SG_1, SG_6, AK_1, AK_12, AK_25, AK_27 fixed
 *
 * Revision 1.1.4.14  2009/12/08 11:22:51  ukr16032
 * UECC - inspection log items LG_20, LG_23, LG_24, LG_26, LG_27, LG_28, LG_29,
 *  LG_34, LG_40, LG_41 fixed
 *
 * Revision 1.1.4.13  2009/11/26 18:33:49  ukr16018
 * Merge S1AP and RRC (from branch dev_rel_1_0).
 *
 * Revision 1.1.4.11.2.26  2009/11/24 12:12:52  ukr15916
 * tabs expanded, lineending updated for Unix format
 *
 * Revision 1.1.4.11.2.25  2009/11/24 11:32:35  ukr15916
 * updated for dev_rel_1_0
 *
 * Revision 1.1.4.11.2.24.2.3  2009/11/23 16:43:50  ukr15916
 * beautification
 *
 * Revision 1.1.4.11.2.24.2.2  2009/11/20 15:38:46  ukr16032
 * UECC FSMs updated
 *
 * Revision 1.1.4.11.2.24.2.1  2009/11/19 15:34:29  ukr15916
 * RRC_NULL fixed
 *
 * Revision 1.1.4.11.2.24  2009/11/19 10:24:57  ukr15916
 * using memset_wrapper,l3_memcpy_wrapper,memcmp_wrapper
 *
 * Revision 1.1.4.11.2.23  2009/11/19 09:52:19  ukr15916
 * tabs -> spaces
 *
 * Revision 1.1.4.11.2.22  2009/11/18 17:06:14  ukr16032
 * UECC NAS processing updated
 * (except sending NAS PDU in non delivery msg).
 * Security capability processing fixed.
 * Transaction_id generetion updated.
 *
 * Revision 1.1.4.11.2.21  2009/11/17 09:42:25  ukr18880
 * uecc_ue_ctx_get_mme_ue_id(p_ue_context) function is now used instead of
 * directly using mme_ue_id from UE context, in all cases except it initializing
 *
 * Revision 1.1.4.11.2.20  2009/11/15 10:02:59  ukr15916
 * beautification
 *
 * Revision 1.1.4.11.2.19  2009/11/14 16:29:55  ukr16032
 * UECC UE Capability transfer implemented
 * UECC ICSP - security capability checking implemented
 *
 * Revision 1.1.4.11.2.18  2009/11/13 13:14:05  ukr18880
 * comments ordering
 *
 * Revision 1.1.4.11.2.17  2009/11/13 12:36:55  ukr18880
 * *** empty log message ***
 *
 * Revision 1.1.4.11.2.16  2009/11/13 12:23:05  ukr18880
 * comments ordering
 *
 * Revision 1.1.4.11.2.15  2009/11/12 12:31:21  ukr18880
 * *** empty log message ***
 *
 * Revision 1.1.4.11.2.14  2009/11/12 12:25:49  ukr18880
 * New parameter to global context was added from oamh provision request
 *
 * Revision 1.1.4.11.2.13  2009/11/11 20:42:34  ukr18880
 * OAMH fixed according to statistic
 *
 * Revision 1.1.4.11.2.12  2009/11/11 14:46:28  ukr18880
 * UECC statistic bug fix
 *
 * Revision 1.1.4.11.2.11  2009/11/10 20:31:18  ukr18880
 * UECC statistic was implemented
 *
 * Revision 1.1.4.11.2.10  2009/11/10 14:08:23  ukr18880
 * UECC statistic engine was updated
 *
 * Revision 1.1.4.11.2.9  2009/11/06 15:32:23  ukr18880
 * statistic engine was updated
 *
 * Revision 1.1.4.11.2.8  2009/11/06 11:17:21  ukr18880
 * Statistic engine was updated
 *
 * Revision 1.1.4.11.2.7  2009/10/30 15:21:08  ukr15916
 * Define RRC_UECC_N_UE is removed. Dynamic UE number supporting improved.
 *
 * Revision 1.1.4.11.2.6  2009/10/30 12:45:20  ukr15916
 * UECC-OAMH interface -- Get Cell Status and Get UE Status requests handling
 *     added
 *
 ****************************************************************************/

/****************************************************************************
 * Local includes
 ****************************************************************************/

#include "rrc_common_utils.h"
#include "rrc_msg_mgmt.h"
#include "rrc_intrl_api.h"
#include "rrc_oamh_intf.h"
#include "uecc_common.h"
#include "uecc_oamh.h"
#include "uecc_utils.h"
#include "uecc_logger.h"
#include "uecc_ue_ctx.h"
#include "uecc_ed.h"
#include "uecc_s1ap.h"
#include "uecc_rrm.h"
#include <lteMisc.h>
extern uecc_fsm_activity_state_t uecc_fsm_ue_connection_release_ongoing;

/****************************************************************************
 * L O C A L    M A C R O s
 ****************************************************************************/
#define RRC_FLOATING_POINT_PRECISION 1000

/****************************************************************************
 * Local Functions Prototypes
 ****************************************************************************/

static void uecc_oamh_print_current_configuration
(
    uecc_gb_context_t   *p_uecc_gb_context  /* UECC global context */
);

static rrc_return_t uecc_oamh_prov_check_integrity_algorithms(
        uecc_gb_context_t                *p_uecc_gb_context,  /* UECC global context */
        rrc_oam_integrity_algorithms_t   *p_prov_integrity_algorithms,
        rrc_oam_integrity_algorithms_t   *p_integrity_algorithms 
);

static rrc_return_t uecc_oamh_prov_check_ciphering_algorithms(
        uecc_gb_context_t                *p_uecc_gb_context,
        rrc_oam_ciphering_algorithms_t   *p_prov_ciphering_algorithms,
        rrc_oam_ciphering_algorithms_t   *p_ciphering_algorithms
);

static rrc_return_t uecc_oamh_prov_check_and_process_prov_req_data
(
    rrc_uecc_oamh_prov_req_t    *p_prov_req,
    uecc_gb_context_t   *p_uecc_gb_context  /* UECC global context */
);

static rrc_return_t uecc_oamh_fill_ue_status
(
    uecc_gb_context_t   *p_uecc_gb_context, /* UECC global context */
    rrc_ue_index_t      ue_index,
    rrc_cell_index_t     cell_index,
    rrc_oam_ue_status_t *p_ue_status
);
static void uecc_oamh_start_cell_traffic_trace
(
    uecc_gb_context_t   *p_uecc_gb_context, /* UECC global context */
    rrc_uecc_oamh_cell_traffic_trace_start_t *p_request
);
static void uecc_oamh_stop_cell_traffic_trace
(
    uecc_gb_context_t   *p_uecc_gb_context, /* UECC global context */
    rrc_cell_index_t    cell_index
);

void start_uecc_health_monitor_timer(
    uecc_gb_context_t*      p_uecc_gb_context,
    uecc_ue_timer_id_et     uecc_ue_timer_id,
    rrc_timer_duration_t    duration
);

/******************************************************************************
 * Function implementation
 *****************************************************************************/

/******************************************************************************
 * *   FUNCTION NAME: process_timer 
 * *
 * *   set timer with the value  as provided by OAMH.
 * *
 * *   RETURNS:
 * *       RRC_SUCCESS/RRC_FAILURE in actual argument sent in function call
 * *
 * ******************************************************************************/
static void process_timer(uecc_gb_context_t *p_uecc_gb_context,
        rrc_oam_uecc_timer_info_t   *p_timer_info,
        rrc_return_t                *result
)
{
    U16                         index = RRC_NULL;
    rrc_timer_duration_t        rcs_fsm_duration = RRC_NULL;
    rrc_timer_duration_t        rcr_fsm_duration = RRC_NULL;
    rrc_timer_duration_t        rm_fsm_duration = RRC_NULL;
    rrc_timer_duration_t        rrm_ue_capability_enq_duration = RRC_NULL;
    rrc_timer_duration_t        mme_guard_duration = 0;
    rrc_timer_duration_t        contxt_mod_duration = RRC_NULL;
    rrc_timer_duration_t        erab_mod_duration = RRC_NULL;
    rrc_timer_duration_t        erab_setup_duration = RRC_NULL; 
    rrc_timer_duration_t        erab_rel_cmd_duration = RRC_NULL;
    rrc_timer_duration_t        erab_rel_ind_duration = RRC_NULL;
    rrc_timer_duration_t        rlf_w_reest_duration = RRC_NULL;
    rrc_timer_duration_t        rlf_suspend_ue_duration = RRC_NULL;

    /*REL 1.2:HANDOVER PROCEDURE START*/
    rrc_timer_duration_t        ho_prep_duration = RRC_NULL;
    rrc_timer_duration_t        ho_overall_duration = RRC_NULL;
    rrc_timer_duration_t        ll_guard_duration = RRC_NULL;
    rrc_timer_duration_t        offset_duration = RRC_NULL;
    rrc_timer_duration_t        meas_config_guard_duration = RRC_NULL;
    rrc_timer_duration_t        trg_ho_guard_duration = RRC_NULL;
    rrc_timer_duration_t        cre_guard_duration = RRC_NULL;
    /*REL 1.2:HANDOVER PROCEDURE END*/

    /*x2_ho_timer*/
    rrc_timer_duration_t        x2_ho_prep_duration = RRC_NULL;
    rrc_timer_duration_t        x2_ho_overall_duration = RRC_NULL; 

    RRC_UECC_UT_TRACE_ENTER(p_uecc_gb_context);
    /* Process timers */
    for (index = 0;
            (RRC_SUCCESS == (*result)) && (index < p_timer_info->num_of_timers);
            index++)
    {
        /* Check whether timer value is correct */
        if (RRC_NULL == p_timer_info->timer_info[index].timer_val)
        {
            RRC_UECC_TRACE(p_uecc_gb_context->context_index, p_uecc_gb_context->
                    facility_name, RRC_WARNING, "[OAMH] Zero timer value [id = %u]",
                    p_timer_info->timer_info[index].timer_id);
            (*result) = RRC_FAILURE;
            return;
        }

        /* Fill local timer values */
        switch (p_timer_info->timer_info[index].timer_id)
        {
            case UECC_RRC_CONN_SETUP_TIMER:
                rcs_fsm_duration = p_timer_info->timer_info[index].timer_val;
                break;

            case UECC_RRC_CONN_RECONFIG_TIMER:
                rm_fsm_duration = p_timer_info->timer_info[index].timer_val;
                break;

            case UECC_RRC_CONN_RELEASE_TIMER:
                rcr_fsm_duration = p_timer_info->timer_info[index].timer_val;
                break;

            case UECC_RRM_UE_CAPABILITY_ENQ_TIMER:
                rrm_ue_capability_enq_duration = p_timer_info->timer_info[index].
                    timer_val;
                break;

            case UECC_RRC_MME_GUARD_TIMER:
                mme_guard_duration = p_timer_info->timer_info[index].timer_val;
                break;

            case UECC_UE_CONTXT_MODIFY_TIMER:
                contxt_mod_duration = p_timer_info->timer_info[index].timer_val;
                break;

            case UECC_ERAB_SETUP_TIMER:
                erab_setup_duration = p_timer_info->timer_info[index].timer_val;
                break;

            case UECC_ERAB_MODIFY_TIMER:
                erab_mod_duration = p_timer_info->timer_info[index].timer_val;
                break;

            case UECC_ERAB_RELEASE_CMD_TIMER:
                erab_rel_cmd_duration = p_timer_info->timer_info[index].timer_val;
                break;

            case UECC_ERAB_RELEASE_IND_TIMER:
                erab_rel_ind_duration = p_timer_info->timer_info[index].timer_val;
                break;

            case UECC_RLF_WAIT_FOR_REEST_TIMER:
                rlf_w_reest_duration = p_timer_info->timer_info[index].timer_val;
                break;

            case UECC_RLF_UE_SUSPEND_TIMER:
                rlf_suspend_ue_duration = p_timer_info->timer_info[index].timer_val;
                break;

                /*REL 1.2:HANDOVER PROCEDURE START*/

            case UECC_RRC_HO_PREP_TIMER:
                ho_prep_duration = p_timer_info->timer_info[index].timer_val;
                break;

            case UECC_RRC_HO_OVERALL_TIMER:
                ho_overall_duration =
                    p_timer_info->timer_info[index].timer_val;
                break;

            case UECC_LL_GUARD_TIMER:
                ll_guard_duration = p_timer_info->timer_info[index].timer_val;
                break;

            case UECC_RRC_OFFSET_TIMER:
                offset_duration = p_timer_info->timer_info[index].timer_val;
                break;

            case UECC_MEAS_CONFIG_GUARD_TIMER:
                meas_config_guard_duration =
                    p_timer_info->timer_info[index].timer_val;
                break;

            case UECC_RRC_TRG_HO_GUARD_TIMER:
                trg_ho_guard_duration =
                    p_timer_info->timer_info[index].timer_val;
                break;
                /*REL 1.2:HANDOVER PROCEDURE END*/

            case UECC_CRE_GUARD_TIMER:
                cre_guard_duration =
                    p_timer_info->timer_info[index].timer_val;
                break;
                /*x2_ho_timer :start*/ 
            case UECC_RRC_X2_HO_PREP_TIMER:
                x2_ho_prep_duration = p_timer_info->timer_info[index].timer_val;
                break;

            case UECC_RRC_X2_HO_OVERALL_TIMER:
                x2_ho_overall_duration =
                    p_timer_info->timer_info[index].timer_val;
                break;
                /*x2_ho_timer :end*/ 

            default:
                RRC_UECC_TRACE(p_uecc_gb_context->context_index, p_uecc_gb_context->
                        facility_name, RRC_WARNING, "[OAMH] Unknown timer [id = %u]",
                        p_timer_info->timer_info[index].timer_id);
                (*result) = RRC_FAILURE;
                return;
        }
    }

    if (RRC_SUCCESS == (*result))
    {
        /* Store parameters in UECC global context */
        uecc_ue_timer_set_durations(p_uecc_gb_context, UECC_RRC_CONN_SETUP_TIMER,
                &p_uecc_gb_context->ue_timers_data, rcs_fsm_duration);
        uecc_ue_timer_set_durations(p_uecc_gb_context, UECC_RRC_CONN_RELEASE_TIMER,
                &p_uecc_gb_context->ue_timers_data, rcr_fsm_duration);
        uecc_ue_timer_set_durations(p_uecc_gb_context, UECC_RRC_CONN_RECONFIG_TIMER,
                &p_uecc_gb_context->ue_timers_data, rm_fsm_duration);
        uecc_ue_timer_set_durations(p_uecc_gb_context, UECC_RRC_MME_GUARD_TIMER,
                &p_uecc_gb_context->ue_timers_data, mme_guard_duration);
        uecc_ue_timer_set_durations(p_uecc_gb_context, UECC_RRM_UE_CAPABILITY_ENQ_TIMER,
                &p_uecc_gb_context->ue_timers_data, rrm_ue_capability_enq_duration);

        uecc_ue_timer_set_durations(p_uecc_gb_context, UECC_UE_CONTXT_MODIFY_TIMER,
                &p_uecc_gb_context->ue_timers_data, contxt_mod_duration);
        uecc_ue_timer_set_durations(p_uecc_gb_context, UECC_ERAB_SETUP_TIMER,
                &p_uecc_gb_context->ue_timers_data, erab_setup_duration);
        uecc_ue_timer_set_durations(p_uecc_gb_context, UECC_ERAB_MODIFY_TIMER,
                &p_uecc_gb_context->ue_timers_data, erab_mod_duration);

        uecc_ue_timer_set_durations(p_uecc_gb_context, UECC_ERAB_RELEASE_CMD_TIMER,
                &p_uecc_gb_context->ue_timers_data, erab_rel_cmd_duration);
        uecc_ue_timer_set_durations(p_uecc_gb_context, UECC_ERAB_RELEASE_IND_TIMER,
                &p_uecc_gb_context->ue_timers_data, erab_rel_ind_duration);
        uecc_ue_timer_set_durations(p_uecc_gb_context, UECC_RLF_WAIT_FOR_REEST_TIMER,
                &p_uecc_gb_context->ue_timers_data, rlf_w_reest_duration);
        uecc_ue_timer_set_durations(p_uecc_gb_context, UECC_RLF_UE_SUSPEND_TIMER,
                &p_uecc_gb_context->ue_timers_data, rlf_suspend_ue_duration);

        /*REL 1.2:HANDOVER PROCEDURE START*/
        uecc_ue_timer_set_durations(p_uecc_gb_context, UECC_RRC_HO_PREP_TIMER,
                &p_uecc_gb_context->ue_timers_data, (U16)(ho_prep_duration + 
                    offset_duration));
        uecc_ue_timer_set_durations(p_uecc_gb_context, UECC_RRC_HO_OVERALL_TIMER,
                &p_uecc_gb_context->ue_timers_data, (U16)(ho_overall_duration +
                    offset_duration));
        uecc_ue_timer_set_durations(p_uecc_gb_context, UECC_LL_GUARD_TIMER,
                &p_uecc_gb_context->ue_timers_data, ll_guard_duration);
        uecc_ue_timer_set_durations(p_uecc_gb_context, UECC_RRC_OFFSET_TIMER,
                &p_uecc_gb_context->ue_timers_data, offset_duration);
        uecc_ue_timer_set_durations(p_uecc_gb_context, UECC_MEAS_CONFIG_GUARD_TIMER,
                &p_uecc_gb_context->ue_timers_data, meas_config_guard_duration);
        uecc_ue_timer_set_durations(p_uecc_gb_context, UECC_RRC_TRG_HO_GUARD_TIMER,
                &p_uecc_gb_context->ue_timers_data,trg_ho_guard_duration);
        /*REL 1.2:HANDOVER PROCEDURE END*/
        uecc_ue_timer_set_durations(p_uecc_gb_context, UECC_CRE_GUARD_TIMER,
                &p_uecc_gb_context->ue_timers_data,cre_guard_duration);

        /*x2_ho_timer :start*/
        uecc_ue_timer_set_durations(p_uecc_gb_context, UECC_RRC_X2_HO_PREP_TIMER,
                &p_uecc_gb_context->ue_timers_data, (U16)(x2_ho_prep_duration + 
                    offset_duration));
        uecc_ue_timer_set_durations(p_uecc_gb_context, UECC_RRC_X2_HO_OVERALL_TIMER,
                &p_uecc_gb_context->ue_timers_data, (U16)(x2_ho_overall_duration +
                    offset_duration));
        /*x2_ho_timer :end*/
    }
    RRC_UECC_UT_TRACE_EXIT(p_uecc_gb_context);
}

/******************************************************************************
 * *   FUNCTION NAME: fill_prov_timer_info_in_uecc_global_context 
 * *
 * *   fill timer info into ue cc global context as provided by OAMH.
 * *
 * *   RETURNS:
 * *       RRC_SUCCESS/RRC_FAILURE
 * *
 * ******************************************************************************/

static rrc_return_t fill_prov_timer_info_in_uecc_global_context(
        rrc_uecc_oamh_prov_req_t    *p_prov_req,
        uecc_gb_context_t           *p_uecc_gb_context
        )
{
    rrc_return_t            result = RRC_SUCCESS;
    rrc_timer_duration_t    intra_cell_ho_guard_duration = RRC_NULL;
    rrc_timer_duration_t    ue_reconfig_duration = RRC_NULL;
    rrc_timer_duration_t    cco_guard_timer_duration = RRC_NULL;
    rrc_timer_duration_t    counter_check_guard_duration = RRC_NULL;
    rrc_timer_duration_t    ue_information_guard_duration = RRC_NULL;
    rrc_timer_duration_t    store_ue_context_timer_duration = RRC_NULL;
    rrc_timer_duration_t        health_monitor_timer_duration = RRC_NULL;
#ifdef ENDC_ENABLED
/*NR_DC Code Change Start*/
    rrc_timer_duration_t    dc_prep_timer_duration = RRC_NULL;
    rrc_timer_duration_t    dc_bearer_change_guard_timer_duration = RRC_NULL;
/*NR_DC Code Change Stop*/
#endif

    RRC_UECC_UT_TRACE_ENTER(p_uecc_gb_context);
    if ( RRC_UECC_TIMERS_INFO & p_prov_req->bitmask )
    {
        if ( RRC_UECC_INTRA_CELL_HO_GUARD_TIMER_PRESENT &
                p_prov_req->uecc_timers_info.bitmask )
        {
            intra_cell_ho_guard_duration = 
                p_prov_req->uecc_timers_info.uecc_intra_cell_ho_guard_timer;
        }
        if ( RRC_UECC_UE_RECONFIG_TIMER_PRESENT &
                p_prov_req->uecc_timers_info.bitmask )
        {
            ue_reconfig_duration = 
                p_prov_req->uecc_timers_info.uecc_ue_reconfig_timer;
        }
        if ( RRC_UECC_CCO_GUARD_TIMER_PRESENT &
                p_prov_req->uecc_timers_info.bitmask )
        {
            cco_guard_timer_duration = 
                p_prov_req->uecc_timers_info.uecc_cco_guard_timer;
        }
        if ( RRC_UECC_COUNTER_CHECK_TIMER_PRESENT &
                p_prov_req->uecc_timers_info.bitmask )
        {
            counter_check_guard_duration = 
                p_prov_req->uecc_timers_info.uecc_counter_check_timer;
        }
        if ( RRC_UECC_UE_INFORMATION_TIMER_PRESENT &
                p_prov_req->uecc_timers_info.bitmask )
        {
            ue_information_guard_duration = 
                p_prov_req->uecc_timers_info.uecc_ue_information_timer;
        }
        if ( RRC_UECC_STORE_UE_CONTEXT_TIMER_PRESENT &
                p_prov_req->uecc_timers_info.bitmask )
        {
            store_ue_context_timer_duration = 
                p_prov_req->uecc_timers_info.uecc_store_ue_context_timer;
        }
        if (RRC_UECC_HEALTH_MONITORING_TIMER_PRESENT &
                    p_prov_req->uecc_timers_info.bitmask)
        {
            health_monitor_timer_duration = 
                    p_prov_req->uecc_timers_info.uecc_health_monitor_timer_value * 1000;
        }
#ifdef ENDC_ENABLED
/*NR_DC Code Change Start*/
        if (RRC_UECC_DC_PREP_TIMER_PRESENT &
                    p_prov_req->uecc_timers_info.bitmask)
        {
            dc_prep_timer_duration = 
                    p_prov_req->uecc_timers_info.uecc_dc_prep_timer;
        }
        if(RRC_UECC_DC_BEARER_CHANGE_GUARD_PRESENT &
                p_prov_req->uecc_timers_info.bitmask)
        {
            dc_bearer_change_guard_timer_duration = 
                    p_prov_req->uecc_timers_info.uecc_dc_bearer_change_guard_timer;
        }
/*NR_DC Code Change Stop*/
#endif
    }

    /*Initialize UE contexts DB*/
    result = uecc_ue_ctx_db_init(p_uecc_gb_context); 
    if ( RRC_FAILURE == result )
    {
        RRC_UECC_TRACE(p_uecc_gb_context->context_index, p_uecc_gb_context->
                facility_name, RRC_WARNING, "[OAMH] Out of memory");
    }

    if(p_prov_req->len_vendor_name > RRC_VENDOR_NAME_LEN)
    {
        RRC_UECC_TRACE(p_uecc_gb_context->context_index, p_uecc_gb_context->
                facility_name, RRC_WARNING, "[OAMH] Wrong Vendor Name length");
        result = RRC_FAILURE;
    }
    
    if (result == RRC_SUCCESS)
    {
        uecc_ue_timer_set_durations(p_uecc_gb_context, UECC_RRC_INTRA_CELL_HO_GUARD_TIMER,
                &p_uecc_gb_context->ue_timers_data,intra_cell_ho_guard_duration);

        uecc_ue_timer_set_durations(p_uecc_gb_context, UECC_RRM_UE_INFORMATION_REQ_TIMER,
                &p_uecc_gb_context->ue_timers_data,ue_information_guard_duration);

        uecc_ue_timer_set_durations(p_uecc_gb_context, UECC_RRC_COUNTER_CHECK_TIMER,
                &p_uecc_gb_context->ue_timers_data,counter_check_guard_duration);

        uecc_ue_timer_set_durations(p_uecc_gb_context, UECC_RRM_UE_RECONFIG_TIMER,
                &p_uecc_gb_context->ue_timers_data, (U16)(ue_reconfig_duration));
        /* SPR 4118 Start */
        uecc_ue_timer_set_durations(p_uecc_gb_context, UECC_RRC_INTEGRITY_FAILURE_TIMER,
                &p_uecc_gb_context->ue_timers_data, p_uecc_gb_context->uecc_integrity_threshold_timer_value);
        /* SPR 4118 Stop */

        uecc_ue_timer_set_durations(p_uecc_gb_context, UECC_RRC_CCO_GUARD_TIMER,
                &p_uecc_gb_context->ue_timers_data,cco_guard_timer_duration);
        uecc_ue_timer_set_durations(p_uecc_gb_context, UECC_RRC_STORE_UE_CONTEXT_TIMER,
                &p_uecc_gb_context->ue_timers_data,store_ue_context_timer_duration);
        uecc_ue_timer_set_durations(p_uecc_gb_context, UECC_OAM_HEALTH_MONITOR_TIMER,
                &p_uecc_gb_context->ue_timers_data,health_monitor_timer_duration);
#ifdef ENDC_ENABLED
/*NR_DC Code Change Start*/
        uecc_ue_timer_set_durations(p_uecc_gb_context, UECC_RRC_DC_PREP_TIMER,
                &p_uecc_gb_context->ue_timers_data,dc_prep_timer_duration);
/*NR_DC Code Change Stop*/
/*OPTION3X Changes Start*/
        uecc_ue_timer_set_durations(p_uecc_gb_context, UECC_RRC_DC_BEARER_CHANGE_GUARD_TIMER,
                &p_uecc_gb_context->ue_timers_data, dc_bearer_change_guard_timer_duration);
/*OPTION3X Changes Stop*/
#endif
        /* Vendor Name */
        RRC_ASSERT(sizeof(p_uecc_gb_context->vendor_name) ==
                sizeof(p_prov_req->vendor_name));

        p_uecc_gb_context->len_vendor_name = p_prov_req->len_vendor_name;

        l3_memcpy_wrapper(p_uecc_gb_context->vendor_name,
                p_prov_req->vendor_name,
                sizeof(p_uecc_gb_context->vendor_name));
    }
    RRC_UECC_UT_TRACE_EXIT(p_uecc_gb_context);
    return result;
}


