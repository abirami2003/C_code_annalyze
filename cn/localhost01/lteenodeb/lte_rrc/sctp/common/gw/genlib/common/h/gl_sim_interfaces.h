/*******************************************************************************
*
*    FUNCTION    :    Header file for Generic Library - String Identifier
*                     Mapping Manager implementation.
*******************************************************************************
*
* FILENAME    :    gl_sim_interfaces.h
*
* DESCRIPTION :    This file contains the constants and function
*                  declarations of String Identifier Mapping sub-module of the
*                  generic library implemntation. The functions include those
*                  for creation of String Identifier Mapping database and
*                  operations such as addition, reterival of identifiers.
*
* DATE       NAME           REFERENCE     REASON
*----------- -------------- ----------    -------------------------------------
* 16/05/2002 Ravi Jindal    SPR-3960      Enhancements for Rel-1.0.
*
*
* Copyright © 2006 Aricent Inc  All Rights Reserved
*
*******************************************************************************/

#ifndef _GL_SIM_INTERFACES_H_
#define _GL_SIM_INTERFACES_H_

#include "gl_config.h"
#include "gl_types.h"
#include "gl_error.h"
#include "gl_os_port.h"
#include "gl_gscim_interfaces.h"
#include "gl_ulm_interfaces.h"

#include "gl_htm_interfaces.h"

#include "gw_pragma_defs.h"

#ifdef __cplusplus
extern "C"
{
#endif


    /*
     * Any object which is uniquely identified by a null terminated string
     * can be used to store in String Identifier Mapping Database.
     * For each string-id map (string-id and information related to string
     * (or object)) a Numeric-id generated by the String Identifier Mapping
     * Manager.
     * So each string-id map stored in database can be uniquely identified
     * by String-id or Numeric-id.
     * The sim generated numeric-id is used to get the string-id by
     * an API "gl_sim_get_string_id".
     *
     * For string-id, a map refers to numeric-id and pointer to information
     * structure.
     *
     * For numeric-id, a map refers to string-id and pointer to information
     * structure.
     */


    /*
     * Typedef for string-id and information structure memory free function
     * pointer. As memory for the string-id and information structure is
     * allocated by user. So a porting function is required to free the memory
     * for the same.
     * This function is invoked for all the stored maps in API
     * "gl_sim_remove_all_maps".
     */
    typedef gl_return_t ( *gl_sim_free_mem_fn_t )

    ( gw_U32bit        user_id,
      /*
       * As Memory for the string identifier is allocated by the user.
       */
      gw_U8bit         *p_string_id,
      /*
       * As Memory for the information structure is allocated by the user.
       */
      gl_pvoid_t       p_str_id_info,

      gl_error_t       *p_ecode );



    /*
     * Typedef to filter the map list based on string-id or
     * information structure.
     * It reduces the overhead of user, as filtering is done internally
     * with the help of porting function.
     * It may not required, So a value of GL_NULL can be passed.
     */
    typedef gl_return_t ( *gl_sim_str_id_filter_fn_t )

    ( gl_pvoid_t        p_str_id_filter_fn_argu,

      gw_U8bit          *p_string_id,

      gl_pvoid_t        p_str_id_info,

      gw_U32bit         numeric_id,
      /*
       * If return value of falg = GL_TRUE, then string-id is included in the
       * return list.
       * else for flag = GL_FALSE,  is not included in return list.
       */
      gw_boolean        *p_is_id_to_include_in_list,

      gl_error_t        *p_ecode );



    /**********************************************************************
     * External Interfaces
     **********************************************************************/

    /*
     * To initialize data structure for all String Identifier Mappings database
     * with default values.
     */
    extern gl_return_t
    gl_sim_init( void );

    /*
     * To create a String Identifier Mapping Database.
     */
    extern gl_return_t
    gl_sim_create_db

    _ARGS_( (
                /*
                 * Identifier to the owner of String Identifier Mapping
                 * database (sim_db).
                 */
                gw_U32bit               user_id,
                /*
                 * Id of sim_db, used for further operations on sim_db.
                 */
                gl_sim_db_id_t          *p_sim_db_id,
                /*
                 * Maximum possible number of String Identifier Mappings that
                 * be stored in the String Identifier Mapping database.
                 */
                gw_U32bit               max_num_of_map,
                /*
                 * As sim_db is created by using hash-table, So the
                 * maximum number of buckets in the hash-table used for
                 * sim_db.
                 */
                gw_U32bit               max_num_of_buckets,
                /*
                 * Pointer to string-id and information structure memory
                 * free function.
                 */
                gl_sim_free_mem_fn_t    p_free_mem_fn,
                /*
                 * String-ids can be case-sensitive or case-insensitive.
                 */
                gw_boolean              str_id_case_insensitive,

                gl_error_t              *p_ecode ) );



    /*
     * To add a map (string-id and poinetr to information structure) in String
     * Identifier Mapping Database.
     * This function returns a handle to string key, used to get the string
     * key based on handle (numeric-id).
     */
    extern gl_return_t
    gl_sim_add_string_id_map

    _ARGS_( (
                gw_U32bit               user_id,

                gl_sim_db_id_t          sim_db_id,
                /*
                 * Pointer to string-id, the string-id should be a null
                 * terminated string.
                 * sim_db only stores the pointer to string-id, the value
                 * and memory for the string-id is to be allocated by the user.
                 */
                gw_U8bit                *p_string_id,
                /*
                 * It may be possible that a specific information is associated
                 * with the object uniquely identified by string-id.
                 *
                 * (As in case of MG, the numeric-id is provided by the NM.
                 * If this not the case then a value of GL_NULL is to be used
                 * as in MGC).
                 */
                gl_pvoid_t               p_str_id_info,
                /*
                 * A numeric-id is generated by String Identifier Mapping
                 * Manager for each string-id addition, used to get string-id
                 * back (reverse mapping).
                 * The generated numeric-id are unique for each string-id and
                 * used to get string-id and pointer to information structure
                 * (if any). by an API "gl_sim_get_string_id".
                 */
                gw_U32bit              *p_numeric_id,

                gl_error_t              *p_ecode ) );


    extern gl_return_t
    gl_sim_add_numeric_id_map

    _ARGS_( (
                gw_U32bit               user_id,

                gl_sim_db_id_t          sim_db_id,

                gw_U32bit               numeric_id,
                /*
                 * Pointer to string-id, the string-id should be a null
                 * terminated string.
                 * sim_db only stores the pointer to string-id, the value
                 * and memory for the string-id is to be allocated by the user.
                 */
                gw_U8bit                *p_string_id,
                /*
                 * It may be possible that a specific information is associated
                 * with the object uniquely identified by string-id.
                 *
                 * (As in case of MG, the numeric-id is provided by the NM.
                 * If this not the case then a value of GL_NULL is to be used
                 * as in MGC).
                 */
                gl_pvoid_t               p_str_id_info,

                gl_error_t              *p_ecode ) );




    /*
     * To get stored numeric-id and pointer to informantion structure
     * based on given string-id.
     * It returns pointers to user defined information structure and
     * sim generated numeric-id.
     */
    extern gl_return_t
    gl_sim_get_numeric_id

    _ARGS_( ( gw_U32bit               user_id,

              gl_sim_db_id_t          sim_db_id,

              gw_U8bit                *p_string_id,

              gw_U32bit               *p_numeric_id,

              gl_pvoid_t              *p_p_str_id_info,

              gl_error_t              *p_ecode ) );



    /*
     * To get stored pointer to string-id and pointer to
     * information structure based on given numeric-id.
     * Numeric-id should be same to the numeric-id returned
     * in the API "gl_sim_add_string_id_map".
     */
    extern gl_return_t
    gl_sim_get_string_id

    _ARGS_( ( gw_U32bit               user_id,

              gl_sim_db_id_t          sim_db_id,

              gw_U32bit               numeric_id,

              gw_U8bit                **p_p_string_id,

              gl_pvoid_t              *p_p_str_id_info,

              gl_error_t              *p_ecode ) );




    /*
     * To get the string-id maps, which have common pattern (support for wildcard
     * strings).
     * This support is given only for string-id.
     * The map would be returned one by one or in a set of given length,
     * till "is_more_key_to_traverse" is GL_TRUE.
     * This function retuens the number of String-id returned by setting
     * parameter p_num_of_matches (act as both IN/OUT parameter).
     */
    extern gl_return_t
    gl_sim_get_string_id_map_list

    _ARGS_( ( gw_U32bit               user_id,

              gl_sim_db_id_t          sim_db_id,
              /*
               * Start from first map or not flag.
               */
              gl_pvoid_t              *p_p_handle,
              /*
               * Poinetr to string which is required to match
               * with all the stored strings.
               */
              gw_U8bit                *p_string_to_match,
              /*
               * Number of string-id to be fetached in one go.
               */
              gw_U8bit                *p_num_of_match,
              /*
               * It is pointer to user defined function, which is invoked
               * for each string-id with pointer to given function
               * agrument, pointer to string identifer, and pointer to
               * information structure corresponding to each string-id.
               *
               * If the function returns GL_SUCCESS, then string-id and
               * respective pointer to info structure is included in the
               * returned list of ids.
               *
               * If function returns GL_FAILURE, then string-id and
               * respective pointer to info structure is not included in
               * the returned list.
               *
               * If user does not want to use this function, then value of
               * function pointer can be GL_NULL. For GL_NULL value of
               * function pointer function is not invoked inside the
               * function.
               */
              gl_sim_str_id_filter_fn_t  p_str_id_filter_fn,
              /*
               * Argument to the string-id filter function. This pointer is
               * passed as it is to string-id filter function at invocation
               * of function. It can be GL_NULL (if not required).
               */
              gl_pvoid_t              p_str_id_filter_fn_argu,
              /*
               * This array returns pointers to the string-id which have
               * string pointed by p_string_to_match as a perfix.
               * The size of memory pointed by this p_p_string_id_array
               * must be (*p_num_of_matches * sizeof(gw_U8bit **)).
               */
              gw_U8bit                **p_p_string_id_array,

              /*
               * This array returns the poinetr to information structure
               * respectively to the string-ids returned by p_p_string_id_array.
               * The size of memory pointed by this
               * p_p_str_id_info_array must be
               * (*p_num_of_matches * sizeof(gl_pvoid_t *)).
               */
              gl_pvoid_t              *p_str_id_info_array,
              /*
               * This array returns the sim generated numeric-ids
               * respectively to the string-ids returned by
               * p_string_id_array.
               * The size of memory pointed by this
               * p_numeric_id_array must be
               * (*p_num_of_matches * sizeof(gw_U32bit)).
               */
              gw_U32bit               *p_numeric_id_array,
              /*
               * If more number of string-ids are still left to match
               * then the vlaue of flag is set to GL_TRUE.
               */
              gw_boolean              *p_is_more_ids_to_match,

              gl_error_t              *p_ecode ) );



    /*
     * To terminate the get map search, initiated by API
     * "gl_sim_get_string_id_map_list"
     */
    extern gl_return_t
    gl_sim_terminate_get_map_list_search

    _ARGS_( ( gl_sim_db_id_t          sim_db_id,
              gl_pvoid_t              *p_p_map_list_handle,
              gl_error_t              *p_ecode ) );



    /*
     * This function remove the string-id and numeric-id from
     * String Identifier Mapping Database, based on string-id.
     * Both string-id and numeric-id are removed from database.
     *
     * This function returns the poinetr to information structure
     * and numeric-id.
     * As Memory for the string-id and information structure is allocated
     * by user, the memory for the same is to be released by the user.
     */
    extern gl_return_t
    gl_sim_remove_map_by_string_id

    _ARGS_( ( gw_U32bit               user_id,

              gl_sim_db_id_t          sim_db_id,

              gw_U8bit                *p_str_id,

              gw_U8bit                **p_p_str_id_buf,

              gw_U32bit               *p_numeric_id,

              gl_pvoid_t              *p_p_str_id_info,

              gl_error_t              *p_ecode ) );


    /*
     * This function removes the string-id and numeric-id from
     * String Identifier Mapping Database, based on numeric-id.
     * Both string-id and numeric-id are removed from database.
     *
     * This function returns the pointer to information structure
     * and poinetr to string-id.
     * As Memory for the string-id and user information structure is allocated
     * by user, the memory for the same is to be released by the user.
     */
    extern gl_return_t
    gl_sim_remove_map_by_numeric_id

    _ARGS_( ( gw_U32bit               user_id,

              gl_sim_db_id_t          sim_db_id,

              gw_U32bit               numeric_id,

              gw_U8bit                **p_p_string_id,

              gl_pvoid_t              *p_p_str_id_info,

              gl_error_t              *p_ecode ) );



    /*
     * To remove all maps from String Identifier Mapping Database.
     * This function invokes function to free memory allocated for string-id
     * and pointer to information structure, as memory to same is allocated
     * by the user.
     *
     * User should free the memory for same in the function.
     */
    extern gl_return_t
    gl_sim_remove_all_maps


    _ARGS_( ( gw_U32bit               user_id,

              gl_sim_db_id_t          sim_db_id,

              gl_error_t              *p_ecode ) );


    /*
     * To get the number of maps stored in the String Identifier Mapping
     * Database.
     */
    extern gl_return_t
    gl_sim_get_map_count


    _ARGS_( ( gl_sim_db_id_t          sim_db_id,

              gw_U32bit               *p_num_of_maps,

              gl_error_t              *p_ecode ) );


    /*
     * To delete the String Identifier Mapping Database.
     * If database contains any map still stored, then do not delete
     * the database.
     */
    extern gl_return_t
    gl_sim_delete_db


    _ARGS_( ( gw_U32bit               user_id,

              gl_sim_db_id_t          sim_db_id,

              gl_error_t              *p_ecode ) );


    /*
     * To delete all the String Identifier Mapping Database.
     * If forceful_flag = GL_FALSE, donot delete the database which are not empty.
     * otherwise delete all empty and non-empty databases.
     */
    extern gl_return_t
    gl_sim_destroy_all_dbs

    _ARGS_( ( gw_U8bit                is_forceful_cleanup,

              gl_error_t              *p_ecode ) );




#ifdef __cplusplus
}
#endif

#include "gw_pragma_undefs.h"

#endif

