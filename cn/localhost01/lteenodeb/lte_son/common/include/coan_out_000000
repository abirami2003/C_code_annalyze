/*! \file son_utils.h
 *  \brief This file contains the enums, struct, constants definitions used
 *      by the common wrappers of SON.
 *  \date January 20, 2012
 *  \author Gautam Shah/Shilpi Jain
 */

/*!
 *  \copyright {Copyright (c) 2012, Aricent Inc. All Rights Reserved}
 */
#ifndef _SON_UTILS_H_
#define _SON_UTILS_H_

/*! \headerfile son_defines.h <>
 */
#include <son_defines.h>

/*! \headerfile son_types.h <>
 */
#include <son_types.h>

/*! \headerfile son_oam_intf.h <>
 */
#include <son_oam_intf.h>

/*! \headerfile cspl.h <>
   */
#include <cspl.h>

/*! \headerfile time.h <>
 */
#include <time.h>

/*! \headerfile sys/time.h <>
 */
#include <sys/time.h>

/*! \headerfile lteLogger.h <>
   */
#include <lteLogger.h>

/*! \headerfile sched.h <>
 */
#include <sched.h>

void set_cell_and_ue_index(U8 cell_index, U16 ue_index);
void set_cell_index(U8 cell_index);
void set_ue_index(U16 ue_index);
U8   get_cell_index(void);
U16  get_ue_index(void);
void free_cell_and_ue_index(void* info);

#define GET_CELL_INDEX()      get_cell_index()
#define GET_UE_INDEX()        get_ue_index()
#define SET_CELL_INDEX(value) set_cell_index(value)
#define SET_UE_INDEX(value)   set_ue_index(value)
#define SET_CELL_AND_UE_INDEX(cell_index, ue_index) set_cell_and_ue_index(cell_index, ue_index)

/* Platform-dependent defines */

/*! \def SON_MEMSET
 *  \brief An alias for memset
 */
#define SON_MEMSET              memset

/*! \def SON_MEMCPY
 *  \brief An alias for memcpy
 */
#define SON_MEMCPY              memcpy

/*! \def SON_MEMCMP
 *  \brief An alias for memcmp
 */
#define SON_MEMCMP              memcmp

/*! \def SON_FREE
 *  \brief An alias for free
 */
#define SON_FREE(X)             free((void *)X)

/*! \def SON_STRTOK(X,Y)
 *  \brief An alias for strtok
 */
#define SON_STRTOK(X, Y)         strtok((char *)X, (const char *)Y)

/*! \def SON_STRLEN(X)
 * \brief An alias for strlen
 */
#define SON_STRLEN(X)           strlen((const char *)X)

/*! \def SON_STRNLEN(X, Y)
 * \brief An alias for strnlen
 */
#define SON_STRNLEN(X, Y)           strnlen((const char *)X, (son_size_t)Y)

/*! \def SON_STRNCPY(X,Y,Z)
 * \brief An alias for strncpy
 */
#define SON_STRNCPY(X, Y, Z)     strncpy((char *)X, (const char *)Y, (son_size_t)Z)

/*! \def SON_STRDUP(X)
 * \brief An alias for strdup
 */
#define SON_STRDUP(X)          strdup((char *)X)

/*! \def SON_STRCAT(X,Y)
 * \brief An alias for strcat
 */
#define SON_STRCAT(X, Y)        strcat((char *)X, (char *)Y)

/*! \def SON_STRNCAT(X,Y,Z)
 * \brief An alias for strncat
 */
#define SON_STRNCAT(X, Y, Z)        strncat((char *)X, (char *)Y, (son_size_t)Z)

/*! \def SON_STRNCMP(X,Y,Z)
 * \brief An alias for strncmp
 */
#define SON_STRNCMP(X, Y, Z)    strncmp((char *)X, (char *)Y, Z)

/*! \def SON_SNPRINTF(A,B,C,D)
 *  \brief An alias for snprintf
 */
#define SON_SNPRINTF(A, B, C, D)   snprintf((char *)A, B, C, D)

/*! \def SON_QVLOGVA(X,Y,Z)
 *  \brief An alias for CSPL qvLogVa function
 */
#define SON_QVLOGVA(X, Y, Z)      qvLogVa(X, (const char *)Y, Z)

/*! \def SON_FOPEN(X,Y)
 *  \brief An alias for fopen
 */
#define SON_FOPEN(X, Y)        fopen((const char *)X, (const char *)Y)

/*! \def SON_FTELL(X)
 *  \brief An alias for ftell
 */
#define SON_FTELL(X)          ftell((FILE *)X)

/*! \def SON_FREAD(A,B,C,D)
 *  \brief An alias for fread
 */
#define SON_FREAD(A, B, C, D)    fread((void *)A, (size_t)B, (size_t)C, (FILE *)D)

/*! \def SON_FSEEK(X,Y,Z)
 *  \brief An alias for fseek
 */
#define SON_FSEEK(X, Y, Z)      fseek((FILE *)X, (long)Y, (int)Z)

/*! \def SON_FCLOSE(X,Y)
 *  \brief An alias for fclose
 */
#define SON_FCLOSE(X)         fclose((FILE *)X)
#define SON_NTOHL(X)         ntohl(X)
/* SPR-18735 START */
/*! \def SON_CEIL(X,Y)
 *  \brief An implementation for calculating ceiling value of a float
 */
#define SON_CEIL(X) ((son_u32)(X) + ((X) > SON_NULL && (X) != (son_u32)(X)))
/* SPR-18735 END */

/*! \def SON_MIN_TRANSACTION_ID
 *  \brief Macro storing the value of minimum transaction Identifier
 *  generated by SON
 */
#define SON_MIN_TRANSACTION_ID  1

/*! \def SON_MAX_TRANSACTION_ID
 *  \brief Macro storing the value of maximum transaction Identifier
 *  generated by SON
 */
#define SON_MAX_TRANSACTION_ID  0xFFFF

/*! \a const son_log_facility_name
 *  \brief SON Log facility name
 */
extern const son_8 *son_log_facility_name;

/*! \def SON_LOG_LEVEL_NONE
 *  \brief Macro defining log level for no log/trace
 */
/* SPR 22304 Fix Start */
#ifdef ATTRIBUTE_COMP
    void son_trace_dbg(
            U32 is_log_enable,const son_8 *son_log_facility_name,U8 log_level,
            const char* format, ...);
    void son_trace_dbg_1(
            U8 log_level,
            const char* format, ...);

#define SON_TRACE_DBG(is_log_enable,son_log_facility_name,log_level,format, ...)   son_trace_dbg(is_log_enable,son_log_facility_name, log_level, format, ## __VA_ARGS__);
#define SON_TRACE_DBG_1(log_level,format, ...)   son_trace_dbg_1(log_level, format, ## __VA_ARGS__);
#define SON_DEBUG_TRACE SON_TRACE_DBG_1
#define SON_LOG SON_TRACE_DBG
#endif
/* SPR 22304 Fix End */
#define SON_LOG_LEVEL_NONE  QVLOG_NONE

#ifdef SON_ADV_LOGGER
    #define LOGGER_TYPE SON_ADV_LOGGER
#endif

#ifdef SON_INTERNAL_LOGGER
    #define LOGGER_TYPE SON_INTERNAL_LOGGER
#endif

#ifdef SON_IN_MEM_LOGGER 
 #define LOGGER_TYPE SON_IN_MEM_LOGGER
#endif

